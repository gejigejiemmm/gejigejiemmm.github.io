<?xml version="1.0" encoding="utf-8"?>






<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>gejigejiemmm</title>
        <link>https://gejigejiemmm.github.io/</link>
        <description>MemE is a powerful and highly customizable GoHugo theme for personal blogs.</description>
        <generator>Hugo 0.64.1 https://gohugo.io/</generator>
        
            <language>en</language>
        
        
            <managingEditor>787356076 (gejigejiemmm)</managingEditor>
        
        
            <webMaster>787356076 (gejigejiemmm)</webMaster>
        
        
            <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
        
        <lastBuildDate>Fri, 27 Mar 2020 20:57:41 +0800</lastBuildDate>
        
            <atom:link rel="self" type="application/rss+xml" href="https://gejigejiemmm.github.io/rss.xml" />
        
        
            <item>
                <title>Spring</title>
                <link>https://gejigejiemmm.github.io/posts/spring/</link>
                <guid isPermaLink="true">https://gejigejiemmm.github.io/posts/spring/</guid>
                <pubDate>Fri, 27 Mar 2020 19:01:56 +0800</pubDate>
                
                    <author>787356076 (gejigejiemmm)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
                
                    <description><![CDATA[<h2 id="目录结构">目录结构</h2>
<p>[TOC]</p>
<h2 id="回头来看-spring5">回头来看 spring5</h2>
<p>spring 是一个轻量级的非侵入式的开源框架
它的的两大特点，控制反转(IOC) 和 面向切面编程(AOP)</p>
<p>现在spring已经在 java后端这一块形成大一统了。</p>
<h2 id="ioc理论推导">IOC理论推导</h2>
<p>引入相关依赖，因为spring模块较多，我们引入一个较大的springWebMvc，这里maven会自动帮我们导入需要的jar 包</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml">        <span class="c">&lt;!--</span><span class="c"> https://mvnrepository.com/artifact/org.springframework/spring</span><span class="c">-</span><span class="c">webmvc </span><span class="c">--&gt;</span>
        <span class="nt">&lt;dependency</span><span class="nt">&gt;</span>
            <span class="nt">&lt;groupId</span><span class="nt">&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId</span><span class="nt">&gt;</span>spring-webmvc<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;version</span><span class="nt">&gt;</span>5.2.1.RELEASE<span class="nt">&lt;/version&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>首先我们创建一个 UserDao接口,这个接口很简单，他就只有一个getUser的方法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserDao</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">getUser</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>然后呢？我们再去搞一个实现类，就叫UserDaoImpl这个吧</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoImpl</span> <span class="kd">implements</span>  <span class="n">UserDao</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">getUser</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;获取用户数据&#34;</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>同样的 我们需要再写一个 UserService 和 UserServiceImpl
UserService:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">getUser</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>UserServiceImpl:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UserDaoMysqlImpl</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">getUser</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">userDao</span><span class="o">.</span><span class="na">getUser</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>假如前端现在需要从 UserController 也就是我们的后台接口来获取一个 用户信息
那我们用main 方法来替代</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyTest</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[</span><span class="o">]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="n">UserServiceImpl</span> <span class="n">userService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UserServiceImpl</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

        <span class="n">userService</span><span class="o">.</span><span class="na">getUser</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>那这样我们是不是就能获取到用户信息了呢？
答案是当然的。但是，这种方法有什么问题呢？</p>
<p>我们是不是将UserDao 的代码写死了？ 对的，如果这个时候我们需要扩展了，假如说，我们需要从mysql数据库来获取数据了
我们还通过这种方法来写，那当然没问题，但是如果再多一种 Oracle的获取方式呢，再多一种 sqlserver的获取方式呢？
我们总不能每次都将我们的代码 在 service 层修改吧？</p>
<p>那么现在我们 给 Service 层新增一个SetUserDao  方法，当然你也可以在构造方法中传入UserDao这都是没问题的</p>
<p>修改后的 UserService</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UserDaoMysqlImpl</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

    <span class="c1">//利用set 进行动态注入值
</span><span class="c1"></span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUserDao</span><span class="o">(</span><span class="n">UserDao</span> <span class="n">userDao</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">userDao</span> <span class="o">=</span> <span class="n">userDao</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">getUser</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">userDao</span><span class="o">.</span><span class="na">getUser</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>这个时候，其实我们如果需要对获取用户数据源的方法进行修改的话
我们是不是只需要调用在 main方法中 调用set方法就行了？
修改后：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyTest</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[</span><span class="o">]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="n">UserServiceImpl</span> <span class="n">userService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UserServiceImpl</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

        <span class="n">userService</span><span class="o">.</span><span class="na">setUserDao</span><span class="o">(</span><span class="k">new</span> <span class="n">UserDaoMysqlImpl</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>
        <span class="n">userService</span><span class="o">.</span><span class="na">getUser</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

    <span class="o">}</span>
<span class="o">}</span>

</code></pre></td></tr></table>
</div>
</div><p>其实这样我们的程序已经发生了革命性的变化，那就是原来程序的控制权是在我们的service手上，也就是我们程序员手上。</p>
<p>代码修改后呢?</p>
<p>其实控制器已经从我们程序员手上，跑到了用户手上？为什么这么说呢？
因为main方法（现在充当我们的controller）来接受参数，我们在controller 里就可以修改 Dao 的实现类了，而我们的 service 的代码并没有发生改变</p>
<p>这种思想从本质上解决了问题，我们程序员不需要再去管创建什么对象了，系统的耦合性大大降低，我们可以更加专注于业务上，这就是控制反转ioc 的原型</p>
<h3 id="spring-hello-依赖注入">spring hello (依赖注入)</h3>
<p>Hello.java</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Hello</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">String</span> <span class="n">str</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getStr</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">str</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setStr</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">str</span> <span class="o">=</span> <span class="n">str</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">&#34;Hello{&#34;</span> <span class="o">+</span>
                <span class="s">&#34;str=&#39;&#34;</span> <span class="o">+</span> <span class="n">str</span> <span class="o">+</span> <span class="sc">&#39;\&#39;&#39;</span> <span class="o">+</span>
                <span class="sc">&#39;}&#39;</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>application.xml</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
<span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&#34;http://www.springframework.org/schema/beans&#34;</span>
       <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
       <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&#34;</span><span class="nt">&gt;</span>


    <span class="c">&lt;!--</span><span class="c">  使用 spring 来创建 对象  </span><span class="c">--&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;hello&#34;</span> <span class="na">class=</span><span class="s">&#34;cn.edu.zzuli.pojo.Hello&#34;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;str&#34;</span> <span class="na">value=</span><span class="s">&#34;hello spring&#34;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>
<span class="nt">&lt;/beans&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>main</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyTest</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[</span><span class="o">]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">//获取 spring 的上下文对象
</span><span class="c1"></span>        <span class="n">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;beans.xml&#34;</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//那我们现在对象都被 spring 管理了，我们如果需要，直接从里边取出来就可以了
</span><span class="c1"></span>        <span class="n">Object</span> <span class="n">hello</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;hello&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">hello</span><span class="o">)</span><span class="o">;</span>

    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>那么思考一下，Hello 这个对象是谁创建的？
毫无疑问，spring帮我们创建的，这也是控制反转
控制： spring 来控制这些对象，帮我创建好
反转： 我们从主动创建对象，变成了被动的接受对象
依赖注入: 通过set方法 为对象赋值</p>
<h2 id="关于-spring-的配置文件">关于 spring 的配置文件</h2>
<h3 id="常用标签">常用标签</h3>
<p>bean 标签的属性
-  id: 唯一标识
-  class: 全类名
- name: 别名  可以有多个，可以空格分隔，也可以，分割</p>
<p>我们可以通过 set方式为属性赋值
也可以通过构造器的方式为属性赋值：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
<span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&#34;http://www.springframework.org/schema/beans&#34;</span>
       <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
       <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&#34;</span><span class="nt">&gt;</span>

<span class="c">&lt;!--</span><span class="c">    &lt;bean id=&#34;user&#34; class=&#34;cn.edu.zzuli.pojo.User&#34;&gt;</span><span class="c">--&gt;</span>
<span class="c">&lt;!--</span><span class="c">        &lt;property name=&#34;name&#34; value=&#34;halo&#34;/&gt;</span><span class="c">--&gt;</span>
<span class="c">&lt;!--</span><span class="c">    &lt;/bean&gt;</span><span class="c">--&gt;</span>


    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;user&#34;</span> <span class="na">class=</span><span class="s">&#34;cn.edu.zzuli.pojo.User&#34;</span> <span class="na">name=</span><span class="s">&#34;user2,user3 user4&#34;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;constructor-arg</span> <span class="na">name=</span><span class="s">&#34;name&#34;</span> <span class="na">value=</span><span class="s">&#34;hello&#34;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>

    <span class="nt">&lt;alias</span> <span class="na">name=</span><span class="s">&#34;user&#34;</span> <span class="na">alias=</span><span class="s">&#34;getUserByConstructor&#34;</span><span class="nt">/&gt;</span>

<span class="nt">&lt;/beans&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>alias 是设置别名，与bean标签的name属性相同（spring：你可以不用，但我不能没有）</p>
<p>import：</p>
<p>当我们项目较大的时候，多人编写多个配置文件，但是我们在创建ApplicationContext对象的时候，只获取一个xml配置文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="n">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;application.xml&#34;</span><span class="o">)</span><span class="o">;</span>
</code></pre></td></tr></table>
</div>
</div><p>但是我们需要在这个配置文件里，引入其他配置文件，这个时候就可以使用到 import 标签了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
<span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&#34;http://www.springframework.org/schema/beans&#34;</span>
       <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
       <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&#34;</span><span class="nt">&gt;</span>

    <span class="c">&lt;!--</span><span class="c">  引入其他 xml 文件  </span><span class="c">--&gt;</span>
    <span class="nt">&lt;import</span> <span class="na">resource=</span><span class="s">&#34;beans.xml&#34;</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/beans&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="依赖注入di的复杂类型">依赖注入(DI)的复杂类型</h3>
<p>Student.java</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@Data</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Student</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Address</span> <span class="n">address</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span><span class="o">[</span><span class="o">]</span> <span class="n">books</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">hobbies</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">card</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">games</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">wife</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Properties</span> <span class="n">info</span><span class="o">;</span>

<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Address.java</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@Data</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">address</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>appliaction.xml</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
<span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&#34;http://www.springframework.org/schema/beans&#34;</span>
       <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
       <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&#34;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;student&#34;</span> <span class="na">class=</span><span class="s">&#34;cn.edu.zzuli.pojo.Student&#34;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;name&#34;</span> <span class="na">value=</span><span class="s">&#34;hello&#34;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;address&#34;</span> <span class="na">ref=</span><span class="s">&#34;address&#34;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;books&#34;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;array</span><span class="nt">&gt;</span>
                <span class="nt">&lt;value</span><span class="nt">&gt;</span>java<span class="nt">&lt;/value&gt;</span>
                <span class="nt">&lt;value</span><span class="nt">&gt;</span>spring<span class="nt">&lt;/value&gt;</span>
                <span class="nt">&lt;value</span><span class="nt">&gt;</span>mybatis<span class="nt">&lt;/value&gt;</span>
            <span class="nt">&lt;/array&gt;</span>
        <span class="nt">&lt;/property&gt;</span>

        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;hobbies&#34;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;list</span><span class="nt">&gt;</span>
                <span class="nt">&lt;value</span><span class="nt">&gt;</span>读书<span class="nt">&lt;/value&gt;</span>
                <span class="nt">&lt;value</span><span class="nt">&gt;</span>看报<span class="nt">&lt;/value&gt;</span>
                <span class="nt">&lt;value</span><span class="nt">&gt;</span>睡觉<span class="nt">&lt;/value&gt;</span>
            <span class="nt">&lt;/list&gt;</span>
        <span class="nt">&lt;/property&gt;</span>

        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;card&#34;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;map</span><span class="nt">&gt;</span>
                <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&#34;stuId&#34;</span> <span class="na">value=</span><span class="s">&#34;541713140206&#34;</span><span class="nt">/&gt;</span>
                <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">&#34;id&#34;</span> <span class="na">value=</span><span class="s">&#34;410XXXXXXXXXXXXXXXXX&#34;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;/map&gt;</span>
        <span class="nt">&lt;/property&gt;</span>

        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;games&#34;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;set</span><span class="nt">&gt;</span>
                <span class="nt">&lt;value</span><span class="nt">&gt;</span>GTA<span class="nt">&lt;/value&gt;</span>
                <span class="nt">&lt;value</span><span class="nt">&gt;</span>DNF<span class="nt">&lt;/value&gt;</span>
                <span class="nt">&lt;value</span><span class="nt">&gt;</span>刺客信条<span class="nt">&lt;/value&gt;</span>
            <span class="nt">&lt;/set&gt;</span>
        <span class="nt">&lt;/property&gt;</span>

        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;wife&#34;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;null</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/property&gt;</span>

        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;info&#34;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;props</span><span class="nt">&gt;</span>
                <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">&#34;driver&#34;</span><span class="nt">&gt;</span>com.jdbc.mysql.driver<span class="nt">&lt;/prop&gt;</span>
            <span class="nt">&lt;/props&gt;</span>
        <span class="nt">&lt;/property&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>

    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;address&#34;</span> <span class="na">class=</span><span class="s">&#34;cn.edu.zzuli.pojo.Address&#34;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;address&#34;</span> <span class="na">value=</span><span class="s">&#34;zzuli&#34;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>
<span class="nt">&lt;/beans&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="命名空间-c-和-p">命名空间 c 和 p</h3>
<p>c: constructor 构造器注入扩展
p: params 参数注入扩展</p>
<p>具体使用如下
记得引用 xml 的扩展</p>
<pre><code>       xmlns:p=&quot;http://www.springframework.org/schema/p&quot;
       xmlns:c=&quot;http://www.springframework.org/schema/c&quot;
</code></pre><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
<span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&#34;http://www.springframework.org/schema/beans&#34;</span>
       <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
       <span class="na">xmlns:p=</span><span class="s">&#34;http://www.springframework.org/schema/p&#34;</span>
       <span class="na">xmlns:c=</span><span class="s">&#34;http://www.springframework.org/schema/c&#34;</span>
       <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&#34;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;user&#34;</span> <span class="na">class=</span><span class="s">&#34;cn.edu.zzuli.pojo.User&#34;</span> <span class="na">p:age=</span><span class="s">&#34;18&#34;</span> <span class="na">p:name=</span><span class="s">&#34;hello&#34;</span><span class="nt">/&gt;</span>

    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;user2&#34;</span> <span class="na">class=</span><span class="s">&#34;cn.edu.zzuli.pojo.User&#34;</span> <span class="na">c:age=</span><span class="s">&#34;20&#34;</span> <span class="na">c:name=</span><span class="s">&#34;halo&#34;</span><span class="nt">/&gt;</span>

<span class="nt">&lt;/beans&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="bean-的作用域">bean 的作用域</h3>
<ul>
<li>
<p>singleton : 单例，在xml中配置的 bean 全局只有共享一个(唯一)。spring 默认就是单例模式</p>
</li>
<li>
<p>prototype ：原型模式，每获取一次对象，就创建一个对象</p>
</li>
<li>
<p>request,session,application,websocket 对应web的作用域</p>
</li>
</ul>
<p>我们可以在 bean 的标签里通过 scope 属性修改作用域</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml">    <span class="c">&lt;!--</span><span class="c"> 默认的单例模式   </span><span class="c">--&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;user&#34;</span> <span class="na">class=</span><span class="s">&#34;cn.edu.zzuli.pojo.User&#34;</span> <span class="na">p:age=</span><span class="s">&#34;18&#34;</span> <span class="na">p:name=</span><span class="s">&#34;hello&#34;</span><span class="nt">/&gt;</span>

    <span class="c">&lt;!--</span><span class="c">  原型模式   </span><span class="c">--&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;user2&#34;</span> <span class="na">class=</span><span class="s">&#34;cn.edu.zzuli.pojo.User&#34;</span> <span class="na">c:age=</span><span class="s">&#34;20&#34;</span> <span class="na">c:name=</span><span class="s">&#34;halo&#34;</span> <span class="na">scope=</span><span class="s">&#34;prototype&#34;</span><span class="nt">/&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>我们可以在代码中进行测试</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">
    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testBeanScope</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">ApplicationContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="s">&#34;application.xml&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="o">(</span><span class="n">User</span><span class="o">)</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;user&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">User</span> <span class="n">user1</span> <span class="o">=</span> <span class="o">(</span><span class="n">User</span><span class="o">)</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;user&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span> <span class="o">=</span><span class="o">=</span> <span class="n">user1</span><span class="o">)</span><span class="o">;</span>

        <span class="n">User</span> <span class="n">user2</span> <span class="o">=</span> <span class="o">(</span><span class="n">User</span><span class="o">)</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;user2&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">User</span> <span class="n">user3</span> <span class="o">=</span> <span class="o">(</span><span class="n">User</span><span class="o">)</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">&#34;user2&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user2</span> <span class="o">=</span><span class="o">=</span> <span class="n">user3</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>可以看到输出结果</p>
<pre><code class="language-console" data-lang="console">true
false
</code></pre><h3 id="bean-的自动装配">bean 的自动装配</h3>
<p>之前，我们注册bean 都是在xml属性中，手动装配。
但是在 spring 中spring可以通过上下文寻找，自动装配</p>
<p>可以通过 @Autowired 来自动装配</p>
<p>也可在 xml 文件中的 bean 标签的属性 autowire 开启自动注入</p>
<ul>
<li>byName 自动在上下文寻找属性名对应的值，没有的话报空指针异常</li>
<li>byType 自动在上下文寻找对象类型对应的值，但是在配置文件中，只能有一个本类型的对象</li>
</ul>
<p>在配置文件中加入标签开启注解</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
<span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&#34;http://www.springframework.org/schema/beans&#34;</span>
       <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
       <span class="na">xmlns:context=</span><span class="s">&#34;http://www.springframework.org/schema/context&#34;</span>
       <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://www.springframework.org/schema/beans
</span><span class="s">        https://www.springframework.org/schema/beans/spring-beans.xsd
</span><span class="s">        http://www.springframework.org/schema/context
</span><span class="s">        https://www.springframework.org/schema/context/spring-context.xsd&#34;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;context:annotation-config</span><span class="nt">/&gt;</span>

    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;address&#34;</span> <span class="na">class=</span><span class="s">&#34;cn.edu.zzuli.pojo.Address&#34;</span> <span class="na">p:address=</span><span class="s">&#34;zzuli&#34;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;user&#34;</span> <span class="na">class=</span><span class="s">&#34;cn.edu.zzuli.pojo.User&#34;</span> <span class="na">p:name=</span><span class="s">&#34;helllo&#34;</span><span class="nt">/&gt;</span>

<span class="nt">&lt;/beans&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>User.java</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@Data</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
    
    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="n">Address</span> <span class="n">address</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Address.java</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@Data</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">address</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>这样直接输出User 会发现，spring 已经帮我们自动注入了 Address 对象</p>
<p>@AutoWired 默认采用的是 byType方式，如果有多个同类型的对象，那么采取 byName的方式</p>
<p>可以测试一下。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml">    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;address&#34;</span> <span class="na">class=</span><span class="s">&#34;cn.edu.zzuli.pojo.Address&#34;</span> <span class="na">p:address=</span><span class="s">&#34;zzuli&#34;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;address1&#34;</span> <span class="na">class=</span><span class="s">&#34;cn.edu.zzuli.pojo.Address&#34;</span> <span class="na">p:address=</span><span class="s">&#34;zzuli-1111&#34;</span><span class="nt">/&gt;</span>

    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;user&#34;</span> <span class="na">class=</span><span class="s">&#34;cn.edu.zzuli.pojo.User&#34;</span> <span class="na">p:name=</span><span class="s">&#34;helllo&#34;</span><span class="nt">/&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>那么这个时候我们想获取第二个 address1对象该怎么办呢？</p>
<p>我们就要用到 @Qualifier 了，它的 value 值即我们要寻找bean的名字(id)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="nd">@Autowired</span>
    <span class="nd">@Qualifier</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">&#34;address1&#34;</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">Address</span> <span class="n">address</span><span class="o">;</span>
</code></pre></td></tr></table>
</div>
</div><p>另外，如果想实现自动装配，其实java也为我们提供了一个注解
@Resource
默认情况下他去 byName ，如果没有对应的，他会去byType</p>
<h3 id="spring-的注解开发">spring 的注解开发</h3>
<p>在 spring 4 之后，要使用注解，必须要导入 aop这个依赖。
而且，在java8出来后，注解开发，越来越流行了，spring也从配置文件的方式，渐渐转为注解的方式，在 springboot 中你可以明显的享受到注解的快乐</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@Data</span>
<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;helllo&#34;</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span> <span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;20&#34;</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">age</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>@Component 注解，意味着，这个类，你会被 IOC容器所管理</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml"><span class="nt">&lt;context:component-scan</span> <span class="na">base-package=</span><span class="s">&#34;cn.edu.zzuli.pojo&#34;</span><span class="nt">/&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>我们可以通过配置文件来 对整个包进行扫描，扫描后，我们在对应的类上加上@Component 注解，这个类就会被spring的 IOC 容器所管理。</p>
<p>同样
@Scope(&ldquo;singleton&rdquo;) 可以来进行作用域的修改</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@Data</span>
<span class="nd">@Component</span>
<span class="nd">@Scope</span><span class="o">(</span><span class="s">&#34;singleton&#34;</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
<span class="o">}</span>


</code></pre></td></tr></table>
</div>
</div><h3 id="使用java类的方式配置spring">使用Java类的方式，配置spring</h3>
<p>@Configuration标记的类叫做配置类，它相当于xml文件的beans标签，这个类里面需要注册bean，相当于在beans中注册bean。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>

<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>bean注册是有两种方式
第一种，
使用@Bean标记一个返回javabean的方法，返回的javabean作为bean注册到beans中。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">Person</span> <span class="nf">getPerson</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>但是要注意，这个时候，spring为我们注册的bean 的名字是方法名
如果你要让他的名字为 person 的话
你需要让注解的name 属性为 person</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@Bean</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;person&#34;</span><span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><hr>
<p>第二种，使用@Component+@ComponentScan的方式：@Component标记在要注册bean的类上，@ComponentScan标记在配置类上用于扫描组件。</p>
<p>AppConfig.java :</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">&#34;cn.edu.zzuli.pojo&#34;</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>

    <span class="c1">//采用第二种方式，就不需要自己再手动注册Bean了
</span><span class="c1"></span>    <span class="c1">// @Bean(name = &#34;person&#34;)
</span><span class="c1"></span>    <span class="c1">// public Person getPerson() {
</span><span class="c1"></span>    <span class="c1">//     return new Person();
</span><span class="c1"></span>    <span class="c1">// }
</span><span class="c1"></span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Person.java</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@Data</span>
<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;helllo&#34;</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span> <span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;20&#34;</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">age</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>Ps：（ 如果你两个方法一起使用，并且没有在@Bean注解里指定名字
那么 spring 会注册两个bean。一个叫 person 一个叫 getPerson ）</p>
<hr>
<p>如果这个时候我们还需要采用多个配置文件的话，那么我们可以使用@import注解在我们的配置类上引用 其他配置文件的.class 属性</p>
<p>@Import(App2Config.class)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">&#34;cn.edu.zzuli.pojo&#34;</span><span class="o">)</span>
<span class="nd">@Import</span><span class="o">(</span><span class="n">App2Config</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>

<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="aop">AOP</h2>
<p>在 AOP 之前，我们可以先来看看静态代理和动态代理</p>
<h3 id="静态代理">静态代理</h3>
<p>静态代理需要抽象出真实角色，代理角色，还要有访问代理角色</p>
<p>具体例子</p>
<ul>
<li>房东：出租房 （真实角色（被代理角色））</li>
<li>中介：帮你租房，帮房东出租房 （代理角色）</li>
<li>你：租房 （访问代理角色）</li>
</ul>
<p>具体代码：
租房接口：（抽象出的业务行为）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Rent</span> <span class="o">{</span>

    <span class="kt">void</span> <span class="nf">Rent</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>房东：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Host</span> <span class="kd">implements</span> <span class="n">Rent</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">Rent</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;房东出租房子&#34;</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>中介：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Proxy</span> <span class="kd">implements</span> <span class="n">Rent</span> <span class="o">{</span>

    <span class="c1">//被代理的房东
</span><span class="c1"></span>    <span class="kd">private</span> <span class="n">Host</span> <span class="n">host</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Proxy</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span><span class="o">}</span>

    <span class="kd">public</span> <span class="nf">Proxy</span><span class="o">(</span><span class="n">Host</span> <span class="n">host</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">host</span> <span class="o">=</span> <span class="n">host</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">Rent</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">sign</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">visitHost</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">host</span><span class="o">.</span><span class="na">Rent</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">//中介的增强功能
</span><span class="c1"></span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sign</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;签合同&#34;</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">//中介的增强功能
</span><span class="c1"></span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visitHost</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;看房&#34;</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>你：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Cilent</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[</span><span class="o">]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Proxy</span> <span class="n">proxy</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Proxy</span><span class="o">(</span><span class="k">new</span> <span class="n">Host</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>
        <span class="c1">//你找中介租房
</span><span class="c1"></span>        <span class="n">proxy</span><span class="o">.</span><span class="na">Rent</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>静态代理的优点：</p>
<ul>
<li>可以使真实角色的操作更存粹</li>
<li>通过代理角色，可以做一些公共业务基础上的功能增强，也实现了业务的分工。</li>
<li>公共业务发生扩展时方便集中管理。</li>
</ul>
<p>🌰</p>
<ul>
<li>假如有多个房东，我们需要添加房屋维修的方法，这个时候我们只需要在代理对象，也就是中介这个对象里添加维修房屋的方法就可以了，不需要再每一个房东里去加</li>
<li>假如我们需要在真实对象的每个方法中都加入日志功能，那么我们在代理类中实现就好，虽然代码增加了，但是解耦了，而且保证了原有业务代码不变。</li>
</ul>
<p>记住最最最最重要的一点就是，我们尽量不改变原有的代码，而是再代理类里边坐增强。</p>
<p>但是它也有缺点</p>
<ul>
<li>一个真实角色就会产生一个代理角色，代码里翻倍，开发效率变低</li>
</ul>
<p>而解决这个缺点的就是动态代理</p>
<h3 id="动态代理">动态代理</h3>
<p>动态代理和静态代理角色一样，但是它的代理类是动态生成的，不是我们一开始就写好的。
动态代理分为两大类，基于接口的动态代理，基于类的动态代理</p>
<ul>
<li>基于接口的动态代理&ndash;jdk 的动态代理</li>
<li>基于类的动态代理： cglib （不用在意，我们一般都用jdk的）</li>
</ul>
<p>需要了解两个类，</p>
<p>Proxy： 代理类
newProxyInstance proxy 的静态方法，用来获取一个Proxy（代理类），
参数分别为，（类加载器，实现的接口，InvocationHandler）</p>
<p>InvocationHandler：
调用处理程序，用来动态生成代理类
其中有一个invoke方法，当代理类调用方法时，处理程序类会帮我们委派到 invoke方法里</p>
<p>我们现在要为 用户业务逻辑接口 的每一个方法都添加日志功能</p>
<p>UserService</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
    <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
    <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
    <span class="kt">void</span> <span class="nf">query</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>UserServiceImpl</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;添加一个用户&#34;</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;删除一个用户&#34;</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;修改一个用户&#34;</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">query</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;查找一个用户&#34;</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>InvocationHandler:程序处理类</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProxyInvocationHandler</span> <span class="kd">implements</span> <span class="n">InvocationHandler</span> <span class="o">{</span>

    <span class="c1">//被代理的类
</span><span class="c1"></span>    <span class="c1">//如果要具体的到某一个类的话，最好使用它实现的接口
</span><span class="c1"></span>    <span class="kd">private</span> <span class="n">Object</span> <span class="n">target</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTarget</span><span class="o">(</span><span class="n">Object</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">target</span> <span class="o">=</span> <span class="n">target</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">//动态生成代理类
</span><span class="c1"></span>    <span class="c1">//newProxyInstance proxy 的静态方法，用来获取一个Proxy（代理类），
</span><span class="c1"></span>    <span class="c1">//参数分别为，（类加载器，实现的接口，InvocationHandler）
</span><span class="c1"></span>    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">getProxy</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">Proxy</span><span class="o">.</span><span class="na">newProxyInstance</span><span class="o">(</span><span class="n">target</span><span class="o">.</span><span class="na">getClass</span><span class="o">(</span><span class="o">)</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">(</span><span class="o">)</span><span class="o">,</span>
                <span class="n">target</span><span class="o">.</span><span class="na">getClass</span><span class="o">(</span><span class="o">)</span><span class="o">.</span><span class="na">getInterfaces</span><span class="o">(</span><span class="o">)</span><span class="o">,</span><span class="k">this</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>


    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="n">Object</span> <span class="n">proxy</span><span class="o">,</span> <span class="n">Method</span> <span class="n">method</span><span class="o">,</span> <span class="n">Object</span><span class="o">[</span><span class="o">]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
        <span class="c1">//利用反射来获取方法名字
</span><span class="c1"></span>        <span class="n">log</span><span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">getName</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>
        <span class="n">Object</span> <span class="n">result</span> <span class="o">=</span> <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">target</span><span class="o">,</span> <span class="n">args</span><span class="o">)</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">//添加日志
</span><span class="c1"></span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">log</span><span class="o">(</span><span class="n">String</span> <span class="n">methodName</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;使用了&#34;</span> <span class="o">+</span> <span class="n">methodName</span> <span class="o">+</span> <span class="s">&#34;方法&#34;</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>main</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Cilent</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[</span><span class="o">]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="n">UserServiceImpl</span> <span class="n">userService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UserServiceImpl</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//创建程序处理类，用来动态生成代理类
</span><span class="c1"></span>        <span class="n">ProxyInvocationHandler</span> <span class="n">invocationHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ProxyInvocationHandler</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="c1">//设置被代理对象
</span><span class="c1"></span>        <span class="n">invocationHandler</span><span class="o">.</span><span class="na">setTarget</span><span class="o">(</span><span class="n">userService</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//获取代理类
</span><span class="c1"></span>        <span class="n">UserService</span> <span class="n">proxy</span> <span class="o">=</span> <span class="o">(</span><span class="n">UserService</span><span class="o">)</span> <span class="n">invocationHandler</span><span class="o">.</span><span class="na">getProxy</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//调用方法时，程序处理类会帮我们委派到invoke方法里。
</span><span class="c1"></span>        <span class="n">proxy</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>动态代理的好处：</p>
<ul>
<li>一个动态代理类，代理的是一个接口，改代码的成本很低，代码量也少</li>
</ul>
<h3 id="aop-xml-方式">AOP xml 方式</h3>
<p>什么是aop呢？它叫做面向切面编程，是面向对象的扩展，一般当我们在处理业务逻辑前后有需要执行的操作的时候，比如说日志或者权限验证</p>
<p>这时我们会选择横向的来扩展，在原业务代码外来处理新的逻辑，不改变原有代码，这种方式就是 aop 编程</p>
<p>而spring 的aop呢，它就是基于 动态代理的基础上进行实现的</p>
<p>一些重要的名词解释</p>
<ul>
<li>
<p>目标 被通知的对象</p>
</li>
<li>
<p>代理 向目标对象通知之后创建的对象</p>
</li>
<li>
<p>连接点</p>
<ul>
<li>基本每个方法的前，后（两者都有也行），或抛出异常时都可以是连接点</li>
</ul>
</li>
<li>
<p>切入点</p>
<ul>
<li>上面说的连接点的基础上，来定义切入点，你的一个类里，有15个方法，那就有几十个连接点了对把，但是你并不想在所有方法附近都使用通知（使用叫织入，以后再说），你只想让其中的几个，在调用这几个方法之前，之后或者抛出异常时干点什么，那么就用切点来定义这几个方法，让切点来筛选连接点，选中那几个你想要的方法。</li>
</ul>
</li>
<li>
<p>通知</p>
<ul>
<li>切面必须要实现的功能，也是类的方法，就比如你想在方法执行前这个连接点干点啥</li>
</ul>
</li>
<li>
<p>切面</p>
<ul>
<li>具体可以看成类，是通知和切入点的结合。，没连接点什么事情，连接点就是为了让你好理解切点，搞出来的，明白这个概念就行了。通知说明了干什么和什么时候干（什么时候通过方法名中的before,after，around等就能知道），而切入点说明了在哪干（指定到底是哪个方法），这就是一个完整的切面定义</li>
</ul>
</li>
<li>
<p>织入
　　把切面应用到目标对象来创建新的代理对象的过程。spring采用的是运行时
　　关键就是：切点定义了哪些连接点会得到通知</p>
</li>
</ul>
<p>在此感谢大佬的总结：<a href="https://blog.csdn.net/dcrose/article/details/79907239">aop名词解释</a></p>
<p>首先要使用aop，我们必须导入 aspectjweaver 依赖</p>
<h4 id="方式一">方式一</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml">    <span class="nt">&lt;dependencies</span><span class="nt">&gt;</span>
        <span class="c">&lt;!--</span><span class="c"> https://mvnrepository.com/artifact/org.aspectj/aspectjweaver </span><span class="c">--&gt;</span>
        <span class="nt">&lt;dependency</span><span class="nt">&gt;</span>
            <span class="nt">&lt;groupId</span><span class="nt">&gt;</span>org.aspectj<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId</span><span class="nt">&gt;</span>aspectjweaver<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;version</span><span class="nt">&gt;</span>1.9.4<span class="nt">&lt;/version&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
    <span class="nt">&lt;/dependencies&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>其次，我们创建一个日志类，让他实现 MethodBeforeAdvice</p>
<p>MethodBeforeAdvice,在目标方法执行之前执行
- method 要执行的目标方法
- objects 方法参数
- target 目标对象</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Log</span> <span class="kd">implements</span> <span class="n">MethodBeforeAdvice</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">before</span><span class="o">(</span><span class="n">Method</span> <span class="n">method</span><span class="o">,</span> <span class="n">Object</span><span class="o">[</span><span class="o">]</span> <span class="n">objects</span><span class="o">,</span> <span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">o</span><span class="o">.</span><span class="na">getClass</span><span class="o">(</span><span class="o">)</span><span class="o">.</span><span class="na">getName</span><span class="o">(</span><span class="o">)</span><span class="o">+</span> <span class="s">&#34;的&#34;</span><span class="o">+</span> <span class="n">method</span><span class="o">.</span><span class="na">getName</span><span class="o">(</span><span class="o">)</span> <span class="o">+</span> <span class="s">&#34;被执行了&#34;</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>UserServiceImpl 和 UserSerive同上相同</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
    <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
    <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
    <span class="kt">void</span> <span class="nf">query</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;添加一个用户&#34;</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">delete</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;删除一个用户&#34;</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;修改一个用户&#34;</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">query</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;查找一个用户&#34;</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>然后再 application.xml 的文件中配置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
<span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&#34;http://www.springframework.org/schema/beans&#34;</span>
       <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
       <span class="na">xmlns:aop=</span><span class="s">&#34;http://www.springframework.org/schema/aop&#34;</span>
       <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&#34;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;log&#34;</span> <span class="na">class=</span><span class="s">&#34;cn.edu.zzuli.log.Log&#34;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">class=</span><span class="s">&#34;cn.edu.zzuli.service.UserServiceImpl&#34;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;aop:config</span><span class="nt">&gt;</span>
        <span class="nt">&lt;aop:pointcut</span> <span class="na">id=</span><span class="s">&#34;pointcut&#34;</span>
                      <span class="na">expression=</span><span class="s">&#34;execution(* cn.edu.zzuli.service.UserServiceImpl.*(..))&#34;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;aop:advisor</span> <span class="na">advice-ref=</span><span class="s">&#34;log&#34;</span> <span class="na">pointcut-ref=</span><span class="s">&#34;pointcut&#34;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/aop:config&gt;</span>
<span class="nt">&lt;/beans&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>然后 main 方法中执行测试，发现结果却是如我们所料</p>
<pre><code>cn.edu.zzuli.service.UserServiceImpl的add被执行了
添加一个用户
</code></pre><h4 id="方式二">方式二</h4>
<p>初次之外，我们还可以自定义切面来进行环绕通知</p>
<p>切面类</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DiyLogPointCut</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">before</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;方法执行前-----&gt;&#34;</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">after</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;&lt;-----方法执行后&#34;</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>配置文件修改为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
<span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&#34;http://www.springframework.org/schema/beans&#34;</span>
       <span class="na">xmlns:xsi=</span><span class="s">&#34;http://www.w3.org/2001/XMLSchema-instance&#34;</span>
       <span class="na">xmlns:aop=</span><span class="s">&#34;http://www.springframework.org/schema/aop&#34;</span>
       <span class="na">xsi:schemaLocation=</span><span class="s">&#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&#34;</span><span class="nt">&gt;</span>

    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;log&#34;</span> <span class="na">class=</span><span class="s">&#34;cn.edu.zzuli.log.Log&#34;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userService&#34;</span> <span class="na">class=</span><span class="s">&#34;cn.edu.zzuli.service.UserServiceImpl&#34;</span><span class="nt">/&gt;</span>

    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;diyLogPointCut&#34;</span> <span class="na">class=</span><span class="s">&#34;cn.edu.zzuli.diy.DiyLogPointCut&#34;</span><span class="nt">/&gt;</span>

    <span class="nt">&lt;aop:config</span><span class="nt">&gt;</span>
        <span class="nt">&lt;aop:aspect</span> <span class="na">id=</span><span class="s">&#34;aspect&#34;</span> <span class="na">ref=</span><span class="s">&#34;diyLogPointCut&#34;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;aop:pointcut</span> <span class="na">id=</span><span class="s">&#34;pointcut&#34;</span>
                          <span class="na">expression=</span><span class="s">&#34;execution(* cn.edu.zzuli.service.UserServiceImpl.*(..))&#34;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;aop:before</span> <span class="na">method=</span><span class="s">&#34;before&#34;</span> <span class="na">pointcut-ref=</span><span class="s">&#34;pointcut&#34;</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;aop:after</span> <span class="na">method=</span><span class="s">&#34;after&#34;</span> <span class="na">pointcut-ref=</span><span class="s">&#34;pointcut&#34;</span><span class="nt">/&gt;</span>

        <span class="nt">&lt;/aop:aspect&gt;</span>
    <span class="nt">&lt;/aop:config&gt;</span>
<span class="nt">&lt;/beans&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>效果相同</p>
<h3 id="aop-注解方式">AOP 注解方式</h3>
<p>既然使用注解了，那当然要使用配置类了。</p>
<p>记得在配置类上开启 @EnableAspectJAutoProxy aspect支持啊</p>
<p>AppConfig.java</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@Configuration</span>
<span class="nd">@ComponentScans</span><span class="o">(</span><span class="o">{</span><span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">&#34;cn.edu.zzuli.service&#34;</span><span class="o">)</span><span class="o">,</span>
        <span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">&#34;cn.edu.zzuli.annotation&#34;</span><span class="o">)</span><span class="o">}</span><span class="o">)</span>
<span class="nd">@EnableAspectJAutoProxy</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>AnnoPointCut 切面：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">//标注这个类是一个切面
</span><span class="c1"></span><span class="nd">@Aspect</span>
<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AnnoPointCut</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">pointcut</span> <span class="o">=</span> <span class="s">&#34;execution(* cn.edu.zzuli.service.UserServiceImpl.*(..))&#34;</span><span class="o">;</span>

    <span class="c1">//可以使用变量的方式
</span><span class="c1"></span>    <span class="nd">@Before</span><span class="o">(</span><span class="n">pointcut</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">before</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;方法执行前-----&gt;&#34;</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">//同样可以直接写切入点
</span><span class="c1"></span>    <span class="nd">@After</span><span class="o">(</span><span class="s">&#34;execution(* cn.edu.zzuli.service.UserServiceImpl.*(..))&#34;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">after</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;&lt;-----方法执行后&#34;</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="nd">@AfterReturning</span><span class="o">(</span><span class="n">pointcut</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterReturning</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;&lt;-----返回参数后-----&gt;&#34;</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">//在环绕时，我们可以给定一个参数
</span><span class="c1"></span>    <span class="c1">//ProceedingJoinPoint 代表我们要获取的切入点
</span><span class="c1"></span>    <span class="nd">@Around</span><span class="o">(</span><span class="n">pointcut</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">around</span><span class="o">(</span><span class="n">ProceedingJoinPoint</span> <span class="n">joinPoint</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Throwable</span> <span class="o">{</span>

        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;环绕前&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="c1">//获取签名（哪个方法被执行了）
</span><span class="c1"></span>        <span class="c1">//void cn.edu.zzuli.service.UserService.add()
</span><span class="c1"></span>        <span class="n">Signature</span> <span class="n">signature</span> <span class="o">=</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">getSignature</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">signature</span><span class="o">)</span><span class="o">;</span>
        <span class="c1">//执行方法，你可以将它想象成一个过滤器
</span><span class="c1"></span>        <span class="n">Object</span> <span class="n">proceed</span> <span class="o">=</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">proceed</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">proceed</span><span class="o">)</span><span class="o">;</span>

        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;环绕后&#34;</span><span class="o">)</span><span class="o">;</span>

    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>service类同上</p>
<p>然后再main 方法执行结果也同上。</p>
<h2 id="整合mybatis">整合mybatis</h2>
<p>这里只写最重要的一部分代码</p>
<h3 id="配置文件的方式">配置文件的方式</h3>
<p>根据官方的快速入门可以这样来做</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserMapper</span> <span class="o">{</span>

    <span class="nd">@Select</span><span class="o">(</span><span class="s">&#34;select * from users&#34;</span><span class="o">)</span>
    <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">getUsers</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>xml 文件创建放在 resource/mapper 下可以了</p>
<p>而且这里要添加一个实现类,其实在我看来这里可以看成service，但这样看着就像多封装了一层一样，所以我还觉得 使用 java类的方式更好一点。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserMapperImpl</span> <span class="kd">implements</span> <span class="n">UserMapper</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">SqlSessionTemplate</span> <span class="n">sqlSession</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setSqlSession</span><span class="o">(</span><span class="n">SqlSessionTemplate</span> <span class="n">sqlSession</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">sqlSession</span> <span class="o">=</span> <span class="n">sqlSession</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">getUsers</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">sqlSession</span><span class="o">.</span><span class="na">getMapper</span><span class="o">(</span><span class="n">UserMapper</span><span class="o">.</span><span class="na">class</span><span class="o">)</span><span class="o">.</span><span class="na">getUsers</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml">    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;dataSource&#34;</span> <span class="na">class=</span><span class="s">&#34;org.springframework.jdbc.datasource.DriverManagerDataSource&#34;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;url&#34;</span> <span class="na">value=</span><span class="s">&#34;jdbc:mysql://127.0.0.1:3306/mybatis?serverTimezone=Asia/Shanghai&amp;amp;useUnicode=yes&amp;amp;characterEncoding=UTF8&#34;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;driverClassName&#34;</span> <span class="na">value=</span><span class="s">&#34;com.mysql.jdbc.Driver&#34;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;username&#34;</span> <span class="na">value=</span><span class="s">&#34;root&#34;</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;password&#34;</span> <span class="na">value=</span><span class="s">&#34;123456&#34;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>

    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;sqlSessionFactory&#34;</span> <span class="na">class=</span><span class="s">&#34;org.mybatis.spring.SqlSessionFactoryBean&#34;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;dataSource&#34;</span> <span class="na">ref=</span><span class="s">&#34;dataSource&#34;</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;mapperLocations&#34;</span> <span class="na">value=</span><span class="s">&#34;classpath:mapper/*.xml&#34;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>

    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;sqlSession&#34;</span> <span class="na">class=</span><span class="s">&#34;org.mybatis.spring.SqlSessionTemplate&#34;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;constructor-arg</span> <span class="na">index=</span><span class="s">&#34;0&#34;</span> <span class="na">ref=</span><span class="s">&#34;sqlSessionFactory&#34;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>

    <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">&#34;userMapper&#34;</span> <span class="na">class=</span><span class="s">&#34;cn.edu.zzuli.mapper.UserMapperImpl&#34;</span><span class="nt">&gt;</span>
       <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&#34;sqlSession&#34;</span> <span class="na">ref=</span><span class="s">&#34;sqlSession&#34;</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="javaconfig-方式">javaConfig 方式</h3>
<p>其实这种方式还是较为支持的。不复杂而且springboot应该也是采用了这种方式</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@Configuration</span>
<span class="nd">@MapperScan</span><span class="o">(</span><span class="s">&#34;cn.edu.zzuli.mapper&#34;</span><span class="o">)</span>
<span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">&#34;cn.edu.zzuli.bean&#34;</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">DriverManagerDataSource</span> <span class="nf">dataSource</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">DriverManagerDataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DriverManagerDataSource</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setUrl</span><span class="o">(</span><span class="s">&#34;jdbc:mysql://127.0.0.1:3306/mybatis?serverTimezone=Asia/Shanghai&amp;useUnicode=yes&amp;characterEncoding=UTF8&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setDriverClassName</span><span class="o">(</span><span class="s">&#34;com.mysql.jdbc.Driver&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;root&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;123456&#34;</span><span class="o">)</span><span class="o">;</span>

        <span class="k">return</span> <span class="n">dataSource</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">SqlSessionFactory</span> <span class="nf">sqlSessionFactory</span><span class="o">(</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">SqlSessionFactoryBean</span> <span class="n">factoryBean</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SqlSessionFactoryBean</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">factoryBean</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">factoryBean</span><span class="o">.</span><span class="na">getObject</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">SqlSessionTemplate</span> <span class="nf">SqlSessionTemplate</span><span class="o">(</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="n">SqlSessionTemplate</span><span class="o">(</span><span class="n">sqlSessionFactory</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="声明式事务">声明式事务</h2>
<p>现在有spring了，我们再也不需要自己在写事务了，我们可以全权交给spring来管理。</p>
<p>这里还要说明一下声明式事务和编程式事务的区别
声明式事务：不侵入原有业务代码，在外部进行事务管理
编程式事务：在原有业务代码中进行事务处理</p>
<p>spring中，使用aop的方式来进行声明式事务
@EnableTransactionManagement 来开启注解式事务</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@Configuration</span>
<span class="nd">@MapperScan</span><span class="o">(</span><span class="s">&#34;cn.edu.zzuli.mapper&#34;</span><span class="o">)</span>
<span class="nd">@ComponentScans</span><span class="o">(</span><span class="o">{</span>
        <span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">&#34;cn.edu.zzuli.bean&#34;</span><span class="o">)</span><span class="o">,</span>
        <span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">&#34;cn.edu.zzuli.service&#34;</span><span class="o">)</span><span class="o">}</span><span class="o">)</span>
<span class="nd">@EnableTransactionManagement</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">DriverManagerDataSource</span> <span class="nf">dataSource</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">DriverManagerDataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DriverManagerDataSource</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setUrl</span><span class="o">(</span><span class="s">&#34;jdbc:mysql://127.0.0.1:3306/mybatis?serverTimezone=Asia/Shanghai&amp;useUnicode=yes&amp;characterEncoding=UTF8&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setDriverClassName</span><span class="o">(</span><span class="s">&#34;com.mysql.jdbc.Driver&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;root&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;123456&#34;</span><span class="o">)</span><span class="o">;</span>

        <span class="k">return</span> <span class="n">dataSource</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">SqlSessionFactory</span> <span class="nf">sqlSessionFactory</span><span class="o">(</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">SqlSessionFactoryBean</span> <span class="n">factoryBean</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SqlSessionFactoryBean</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">factoryBean</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dataSource</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">factoryBean</span><span class="o">.</span><span class="na">getObject</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">SqlSessionTemplate</span> <span class="nf">SqlSessionTemplate</span><span class="o">(</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="n">SqlSessionTemplate</span><span class="o">(</span><span class="n">sqlSessionFactory</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>


    <span class="nd">@Bean</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&#34;transactionManager&#34;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">PlatformTransactionManager</span> <span class="nf">transactionManager</span><span class="o">(</span><span class="o">)</span><span class="o">{</span>
        <span class="c1">//这两个的区别是：DataSourceTransactionManager是配置本地单数据源的数据库事务管理，
</span><span class="c1"></span>        <span class="c1">//而JtaTransactionManager是为配置分布式数据库的
</span><span class="c1"></span>        <span class="c1">//return new JtaTransactionManagerFactoryBean().getObject();
</span><span class="c1"></span>        <span class="k">return</span> <span class="k">new</span> <span class="n">DataSourceTransactionManager</span><span class="o">(</span><span class="n">dataSource</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>在方法或类上来使用 @Transactional 来开启事务，它会通知spring的事务切面来织入事务
在方法抛出RuntimeException或者Error时会触发事务的回滚，在平常我们自己处理事务回滚的时候，我们可以手动抛异常来出发回滚。</p>
<p>同样该注解还可以指定异常类型 rollbackFor = Exception.class</p>
<hr>
<p>Spring定义了7中传播行为：</p>
<ul>
<li>propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是Spring默认的选择。</li>
<li>propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。</li>
<li>propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。</li>
<li>propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。</li>
<li>propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</li>
<li>propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。</li>
<li>propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作。</li>
</ul>
<hr>
<p>一般我们使用默认的 propagation_requierd，如果执行查询操作的时候，我们会加上 readOnly=true</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="nd">@Transactional</span><span class="o">(</span><span class="n">readOnly</span><span class="o">=</span><span class="kc">true</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="nf">getUsers</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">getUsers</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Transactional</span><span class="o">(</span><span class="n">rollbackFor</span> <span class="o">=</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">ArithmeticException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addUser</span><span class="o">(</span><span class="n">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">userMapper</span><span class="o">.</span><span class="na">addUser</span><span class="o">(</span><span class="n">user</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//这里故意报错
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">0</span><span class="o">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span><span class="o">/</span><span class="n">b</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>其次spring 还可以通过 isolation 属性来控制事务的隔离级别
<a href="https://www.cnblogs.com/eunice-sun/p/11024584.html">spring 事务的传播属性和隔离级别</a>
<a href="https://blog.csdn.net/u013929527/article/details/102596243">@Transactional 注解的生效和失效场景</a></p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://gejigejiemmm.github.io/categories/java/">java</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://gejigejiemmm.github.io/tags/spring/">spring</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Mybatisplus</title>
                <link>https://gejigejiemmm.github.io/posts/mybatisplus/</link>
                <guid isPermaLink="true">https://gejigejiemmm.github.io/posts/mybatisplus/</guid>
                <pubDate>Wed, 11 Mar 2020 22:45:34 +0800</pubDate>
                
                    <author>787356076 (gejigejiemmm)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
                
                    <description><![CDATA[<h2 id="目录结构">目录结构</h2>
<p>[TOC]
最近突然想学一下mybatis-plus希望尽快提上日程吧。
好了，提上日程，冲冲冲</p>
<h2 id="快速开始">快速开始</h2>
<p>这里贴一个官网连接 <a href="https://mp.baomidou.com/guide/quick-start.html#%E9%85%8D%E7%BD%AE">mybatis-plus</a>
照着他们一步步来就可以了，有些省事，但确实写的非常详细。</p>
<h3 id="basemapper-中的-insert方法的默认-策略">BaseMapper 中的 insert方法的默认 策略</h3>
<p>在 mp(mybatis-plus) 中，你是用 insert方法的时候，是会自动将id 回填到的对象中的，但是默认情况生成的是这种一连串的 数字</p>
<p><img src="/img/mp-insert.png" alt="mp-insert"></p>
<p>这种生成方式，采用的是 Twitter的雪花算法，具体了解可百度，保证了分布式的情况下id也唯一。</p>
<p>如果你想使用 主键自增的方式，你需要将数据库表中的 主键自增打开，然后在 id 属性上加 @TableId(type = IdType.AUTO)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@Data</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
    <span class="c1">//主键自增
</span><span class="c1"></span>    <span class="nd">@TableId</span><span class="o">(</span><span class="n">type</span> <span class="o">=</span> <span class="n">IdType</span><span class="o">.</span><span class="na">AUTO</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">age</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">email</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>虽然分布式下采用默认的生成策略较好，但是毕竟身为大三狗，我写的也都是小项目。所以就先用自增吧。</p>
<p><a href="https://mp.baomidou.com/guide/annotation.html#tableid">@TableId 具体属性自行查看哦</a></p>
<h3 id="update-方法">update 方法</h3>
<p>mp的 update 是 执行的是动态sql, 也就是条件修改</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">testUpdate</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">1238647983271899149L</span><span class="o">)</span><span class="o">;</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;hello&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="n">20</span><span class="o">)</span><span class="o">;</span>
        <span class="n">userMapper</span><span class="o">.</span><span class="na">updateById</span><span class="o">(</span><span class="n">user</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>你对象里没有的字段，是不会进行修改的</p>
<p><img src="/img/mp-update.png" alt="mp-update.png"></p>
<h4 id="关于-create_time-和-update_time-的问题">关于 create_time 和 update_time 的问题</h4>
<p>在阿里开发手册中写了，数据表必须要有这两个字段。
所以不免会想到，这两个字段能不能自动生成或更新，不通过每次创建时间。</p>
<p>一般有两种策略
之前我用的就是这种</p>
<ul>
<li>
<p>数据库自动生成
<img src="/img/mp-datetime.png" alt="mp-datetime.png">
对这两个字段设置默认值为 CURRENT_TIMESTAMP ，update需要在 根据时间戳更新那里打上勾</p>
</li>
<li>
<p>mp 生成自动填充</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="c1">//插入的时候自动填充
</span><span class="c1"></span>    <span class="nd">@TableField</span><span class="o">(</span><span class="n">fill</span> <span class="o">=</span> <span class="n">FieldFill</span><span class="o">.</span><span class="na">INSERT</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">LocalDateTime</span> <span class="n">createTime</span><span class="o">;</span>
    <span class="c1">//插入和更新的时候自动填充
</span><span class="c1"></span>    <span class="nd">@TableField</span><span class="o">(</span><span class="n">fill</span> <span class="o">=</span> <span class="n">FieldFill</span><span class="o">.</span><span class="na">INSERT_UPDATE</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">LocalDateTime</span> <span class="n">updateTime</span><span class="o">;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">//自动填充 增强类 这里的cretaeTime是实体类属性而不是数据库字段名
</span><span class="c1"></span><span class="nd">@Slf4j</span>
<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyMetaObjectHandler</span> <span class="kd">implements</span> <span class="n">MetaObjectHandler</span> <span class="o">{</span>

    <span class="c1">//插入填充
</span><span class="c1"></span>    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">insertFill</span><span class="o">(</span><span class="n">MetaObject</span> <span class="n">metaObject</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">//自动填充时间
</span><span class="c1"></span>        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;insertFill running&#34;</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//三个参数分别是 字段名，填充值，元数据
</span><span class="c1"></span>        <span class="k">this</span><span class="o">.</span><span class="na">setFieldValByName</span><span class="o">(</span><span class="s">&#34;createTime&#34;</span><span class="o">,</span> <span class="n">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">(</span><span class="o">)</span><span class="o">,</span><span class="n">metaObject</span><span class="o">)</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">setFieldValByName</span><span class="o">(</span><span class="s">&#34;updateTime&#34;</span><span class="o">,</span> <span class="n">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">(</span><span class="o">)</span><span class="o">,</span><span class="n">metaObject</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c1">//更新填充
</span><span class="c1"></span>    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">updateFill</span><span class="o">(</span><span class="n">MetaObject</span> <span class="n">metaObject</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">//自动填充时间
</span><span class="c1"></span>        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;updateFill running&#34;</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//三个参数分别是 字段名，填充值，元数据
</span><span class="c1"></span>        <span class="k">this</span><span class="o">.</span><span class="na">setFieldValByName</span><span class="o">(</span><span class="s">&#34;updateTime&#34;</span><span class="o">,</span> <span class="n">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">(</span><span class="o">)</span><span class="o">,</span><span class="n">metaObject</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="查询">查询</h3>
<h4 id="批量查询">批量查询</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="nd">@Test</span>
    <span class="c1">//批量查询 in(1, 2, 3)
</span><span class="c1"></span>    <span class="kt">void</span> <span class="nf">testSelectBatchIds</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">selectBatchIds</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">1</span><span class="o">,</span> <span class="n">2</span><span class="o">,</span> <span class="n">3</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>
        <span class="n">users</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">:</span><span class="o">:</span><span class="n">println</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="条件查询">条件查询</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="c1">//简单的 条件查询
</span><span class="c1"></span>    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">testSelectByMap</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="o">&gt;</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;name&#34;</span><span class="o">,</span><span class="s">&#34;hello&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;email&#34;</span><span class="o">,</span><span class="s">&#34;geji@qq.com&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">selectByMap</span><span class="o">(</span><span class="n">map</span><span class="o">)</span><span class="o">;</span>
        <span class="n">users</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">:</span><span class="o">:</span><span class="n">println</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="分页查询">分页查询</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">testSelectPage</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Page</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">userPage</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Page</span><span class="o">&lt;</span><span class="o">&gt;</span><span class="o">(</span><span class="n">1</span><span class="o">,</span> <span class="n">5</span><span class="o">)</span><span class="o">;</span>
        <span class="n">userMapper</span><span class="o">.</span><span class="na">selectPage</span><span class="o">(</span><span class="n">userPage</span><span class="o">,</span> <span class="kc">null</span><span class="o">)</span><span class="o">;</span>

        <span class="n">List</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">records</span> <span class="o">=</span> <span class="n">userPage</span><span class="o">.</span><span class="na">getRecords</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">records</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">:</span><span class="o">:</span><span class="n">println</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="逻辑删除">逻辑删除</h3>
<p>数据库添加逻辑字段
在实体类里也添加字段</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="c1">//表示当前字段为逻辑删除字段，默认1删除，0未删除
</span><span class="c1"></span>    <span class="nd">@TableLogic</span>
    <span class="kd">private</span> <span class="n">Integer</span> <span class="n">isDeleted</span><span class="o">;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="代码生成器">代码生成器</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">testCodeGenerator</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">//1.创建代码生成器
</span><span class="c1"></span>        <span class="n">AutoGenerator</span> <span class="n">mpg</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AutoGenerator</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>


        <span class="c1">//2.全局配置
</span><span class="c1"></span>        <span class="n">GlobalConfig</span> <span class="n">gc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GlobalConfig</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="c1">//获取当前项目的路径
</span><span class="c1"></span>        <span class="n">String</span> <span class="n">projectPath</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&#34;user.dir&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">gc</span><span class="o">.</span><span class="na">setOutputDir</span><span class="o">(</span><span class="n">projectPath</span> <span class="o">+</span> <span class="s">&#34;/src/main/java&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">gc</span><span class="o">.</span><span class="na">setAuthor</span><span class="o">(</span><span class="s">&#34;geji&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="c1">//生成后是否打开资源管理器
</span><span class="c1"></span>        <span class="n">gc</span><span class="o">.</span><span class="na">setOpen</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span><span class="o">;</span>
        <span class="c1">//生成文件的时候是否重新覆盖
</span><span class="c1"></span>        <span class="n">gc</span><span class="o">.</span><span class="na">setFileOverride</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span><span class="o">;</span>
        <span class="c1">//设置主键策略
</span><span class="c1"></span>        <span class="n">gc</span><span class="o">.</span><span class="na">setIdType</span><span class="o">(</span><span class="n">IdType</span><span class="o">.</span><span class="na">AUTO</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//设置Service首字母去除I
</span><span class="c1"></span>        <span class="n">gc</span><span class="o">.</span><span class="na">setServiceName</span><span class="o">(</span><span class="s">&#34;%sService&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="c1">//设置日期类型
</span><span class="c1"></span>        <span class="n">gc</span><span class="o">.</span><span class="na">setDateType</span><span class="o">(</span><span class="n">DateType</span><span class="o">.</span><span class="na">TIME_PACK</span><span class="o">)</span><span class="o">;</span>
        <span class="c1">//实体属性 Swagger2 注解
</span><span class="c1"></span>        <span class="n">gc</span><span class="o">.</span><span class="na">setSwagger2</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span><span class="o">;</span>

        <span class="n">mpg</span><span class="o">.</span><span class="na">setGlobalConfig</span><span class="o">(</span><span class="n">gc</span><span class="o">)</span><span class="o">;</span>


        <span class="c1">//3.数据源配置
</span><span class="c1"></span>        <span class="n">DataSourceConfig</span> <span class="n">dsc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataSourceConfig</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">dsc</span><span class="o">.</span><span class="na">setUrl</span><span class="o">(</span><span class="s">&#34;jdbc:mysql://127.0.0.1:3306/mybatis-plus?serverTimezone=Asia/Shanghai&amp;useUnicode=yes&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="c1">// dsc.setSchemaName(&#34;public&#34;);
</span><span class="c1"></span>        <span class="n">dsc</span><span class="o">.</span><span class="na">setDriverName</span><span class="o">(</span><span class="s">&#34;com.mysql.cj.jdbc.Driver&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">dsc</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">&#34;root&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">dsc</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">&#34;123456&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">mpg</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">dsc</span><span class="o">)</span><span class="o">;</span>


        <span class="c1">// 包配置
</span><span class="c1"></span>        <span class="n">PackageConfig</span> <span class="n">pc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PackageConfig</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
<span class="c1">//        pc.setModuleName(scanner(&#34;模块名&#34;));
</span><span class="c1"></span>        <span class="n">pc</span><span class="o">.</span><span class="na">setParent</span><span class="o">(</span><span class="s">&#34;cn.edu.zzuli.MybatisPlusGenerate&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">pc</span><span class="o">.</span><span class="na">setEntity</span><span class="o">(</span><span class="s">&#34;entity&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">pc</span><span class="o">.</span><span class="na">setController</span><span class="o">(</span><span class="s">&#34;controller&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">pc</span><span class="o">.</span><span class="na">setService</span><span class="o">(</span><span class="s">&#34;service&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">pc</span><span class="o">.</span><span class="na">setMapper</span><span class="o">(</span><span class="s">&#34;mapper&#34;</span><span class="o">)</span><span class="o">;</span>

        <span class="n">mpg</span><span class="o">.</span><span class="na">setPackageInfo</span><span class="o">(</span><span class="n">pc</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//策略配置
</span><span class="c1"></span>        <span class="n">StrategyConfig</span> <span class="n">strategy</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StrategyConfig</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="c1">//strategy.setInclude(&#34;xxx&#34;+&#34;_\\w*&#34;);//映射的表名
</span><span class="c1"></span>        <span class="c1">//strategy.setTablePrefix(&#34;xxx_&#34;);//不生成表的前缀
</span><span class="c1"></span>        <span class="n">strategy</span><span class="o">.</span><span class="na">setNaming</span><span class="o">(</span><span class="n">NamingStrategy</span><span class="o">.</span><span class="na">underline_to_camel</span><span class="o">)</span><span class="o">;</span><span class="c1">//驼峰策略
</span><span class="c1"></span>        <span class="c1">//strategy.setColumnNaming(NamingStrategy.underline_to_camel);
</span><span class="c1"></span>
        <span class="c1">//自动添加 lombok的注解
</span><span class="c1"></span>        <span class="n">strategy</span><span class="o">.</span><span class="na">setEntityLombokModel</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span><span class="o">;</span>
        <span class="n">strategy</span><span class="o">.</span><span class="na">setLogicDeleteFieldName</span><span class="o">(</span><span class="s">&#34;is_deleted&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="c1">//去除boolean值的前缀
</span><span class="c1"></span>        <span class="c1">//strategy.setEntityBooleanColumnRemoveIsPrefix(true);
</span><span class="c1"></span>
        <span class="c1">//生成自动填充
</span><span class="c1"></span>        <span class="n">TableFill</span> <span class="n">createTime</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TableFill</span><span class="o">(</span><span class="s">&#34;create_time&#34;</span><span class="o">,</span> <span class="n">FieldFill</span><span class="o">.</span><span class="na">INSERT</span><span class="o">)</span><span class="o">;</span>
        <span class="n">TableFill</span> <span class="n">updateTime</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TableFill</span><span class="o">(</span><span class="s">&#34;update_time&#34;</span><span class="o">,</span> <span class="n">FieldFill</span><span class="o">.</span><span class="na">INSERT_UPDATE</span><span class="o">)</span><span class="o">;</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">TableFill</span><span class="o">&gt;</span> <span class="n">tableFills</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="o">&gt;</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">tableFills</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">createTime</span><span class="o">)</span><span class="o">;</span>
        <span class="n">tableFills</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">updateTime</span><span class="o">)</span><span class="o">;</span>
        <span class="n">strategy</span><span class="o">.</span><span class="na">setTableFillList</span><span class="o">(</span><span class="n">tableFills</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//生成乐观锁的列，version 字段，这里我没有用，就注释掉
</span><span class="c1"></span>        <span class="c1">//strategy.setVersionFieldName(&#34;version&#34;);
</span><span class="c1"></span>
        <span class="c1">//RestFul API
</span><span class="c1"></span>        <span class="n">strategy</span><span class="o">.</span><span class="na">setRestControllerStyle</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span><span class="o">;</span>
        <span class="c1">//url 驼峰命名，转换为_
</span><span class="c1"></span>        <span class="n">strategy</span><span class="o">.</span><span class="na">setControllerMappingHyphenStyle</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span><span class="o">;</span>

        <span class="n">mpg</span><span class="o">.</span><span class="na">setStrategy</span><span class="o">(</span><span class="n">strategy</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//执行
</span><span class="c1"></span>        <span class="n">mpg</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

    <span class="o">}</span>

</code></pre></td></tr></table>
</div>
</div><p><a href="https://blog.csdn.net/qq_39809458/article/details/90667544">网友的踩坑日记</a></p>
<h4 id="条件构造器">条件构造器</h4>
<p>舒服啊，这样,特别是 lambdaWrapper，美滋滋好吧</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">        <span class="n">LambdaQueryWrapper</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">queryWrapper</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LambdaQueryWrapper</span><span class="o">&lt;</span><span class="o">&gt;</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">queryWrapper</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="n">User</span><span class="o">:</span><span class="o">:</span><span class="n">getName</span><span class="o">,</span><span class="s">&#34;halo&#34;</span><span class="o">)</span>
                <span class="o">.</span><span class="na">lt</span><span class="o">(</span><span class="n">User</span><span class="o">:</span><span class="o">:</span><span class="n">getAge</span><span class="o">,</span><span class="n">25</span><span class="o">)</span><span class="o">;</span>

        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userMapper</span><span class="o">.</span><span class="na">selectOne</span><span class="o">(</span><span class="n">queryWrapper</span><span class="o">)</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">user</span><span class="o">)</span><span class="o">;</span>
</code></pre></td></tr></table>
</div>
</div><p><a href="https://mp.baomidou.com/guide/wrapper.html#abstractwrapper">条件构造器官网文档</a></p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://gejigejiemmm.github.io/categories/java/">java</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://gejigejiemmm.github.io/tags/mybatis/">mybatis</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Java8</title>
                <link>https://gejigejiemmm.github.io/posts/java8/</link>
                <guid isPermaLink="true">https://gejigejiemmm.github.io/posts/java8/</guid>
                <pubDate>Wed, 11 Mar 2020 18:58:21 +0800</pubDate>
                
                    <author>787356076 (gejigejiemmm)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
                
                    <description><![CDATA[<h2 id="目录结构">目录结构</h2>
<p>[TOC]</p>
<h2 id="小序">小序</h2>
<p>第一次学java 就是用的jdk8，但在当时并不知道8的新特性。前半年学习过一次，但也就是过一遍，这次再来学习记录一下。</p>
<h2 id="lambda-表达式">lambda 表达式</h2>
<p>lambda 表达式可以省去不部分代码，并且让我们自己的代码看起来简洁。方便了开发。</p>
<p>具体例子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">        <span class="c1">//未使用 lambda
</span><span class="c1"></span>        <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">c1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Integer</span> <span class="n">o1</span><span class="o">,</span> <span class="n">Integer</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">Integer</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">o1</span><span class="o">,</span><span class="n">o2</span><span class="o">)</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span><span class="o">;</span>

        <span class="c1">//使用 lambda 表达式
</span><span class="c1"></span>        <span class="c1">//lambda 表达式可以省去部分代码，让我们的代码看起来更简洁
</span><span class="c1"></span>        <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">c2</span> <span class="o">=</span> <span class="o">(</span><span class="n">o1</span><span class="o">,</span> <span class="n">o2</span><span class="o">)</span> <span class="o">-</span><span class="o">&gt;</span> <span class="n">Integer</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">o1</span><span class="o">,</span><span class="n">o2</span><span class="o">)</span><span class="o">;</span>


        <span class="c1">//方法引用
</span><span class="c1"></span>        <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">c3</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">:</span><span class="o">:</span><span class="n">compare</span><span class="o">;</span>
</code></pre></td></tr></table>
</div>
</div><p>但需要注意的是，只有当接口有一个抽象类方法的时候，才可以使用lambda表达式
lambda 表达式会进行类型推断。如例子中 o1 ，o2因为 前边Comparator<Integer> 已经定义了范型 Integer  所以这里的 o1,o2就是Integer 类型</p>
<p>当只有一个参数时，()可以省略
当只有一条语句时（可能是return语句）的时候{}和 return可以省略</p>
<h2 id="函数式接口">函数式接口</h2>
<p>在 java8里新加了函数式接口的概念。函数式接口是什么呢？
如果一个接口只有一个抽象方法，那么这个接口就可以称之为函数式接口
通常会用 @FunctionalInterface 来标识
我们同样可以自定义函数式接口</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@FunctionalInterface</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MyFunctionInterface</span> <span class="o">{</span>
    
    <span class="kt">void</span> <span class="nf">method</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>@FunctionalInterface 会帮我们检测我们的接口是否符合 函数式接口的定义</p>
<p>lambda 表达式依赖于函数式接口，其本质就是作为 函数式接口的实例</p>
<h3 id="java-内置的函数式接口">java 内置的函数式接口</h3>
<h4 id="consumert-消费型接口">Consumer<T> 消费型接口</h4>
<p>参数类型为 T ：接收一个T类型的值，没有返回值
包含方法 void accept (T t)
🌰:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testConsumer</span><span class="o">(</span><span class="o">)</span><span class="o">{</span>
        
        <span class="c1">//java8 之前
</span><span class="c1"></span>        <span class="n">happyTime</span><span class="o">(</span><span class="n">500</span><span class="o">.</span><span class="na">0</span><span class="o">,</span> <span class="k">new</span> <span class="n">Consumer</span><span class="o">&lt;</span><span class="n">Double</span><span class="o">&gt;</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">Double</span> <span class="n">aDouble</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;看电影和吃饭消费了&#34;</span> <span class="o">+</span> <span class="n">aDouble</span><span class="o">)</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span><span class="o">)</span><span class="o">;</span>
        
        <span class="c1">//lambda 表达式
</span><span class="c1"></span>        <span class="n">happyTime</span><span class="o">(</span><span class="n">500</span><span class="o">.</span><span class="na">0</span><span class="o">,</span><span class="n">money</span> <span class="o">-</span><span class="o">&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;看电影和吃饭消费了&#34;</span> <span class="o">+</span> <span class="n">money</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>
        
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">happyTime</span><span class="o">(</span><span class="n">Double</span> <span class="n">money</span><span class="o">,</span> <span class="n">Consumer</span><span class="o">&lt;</span><span class="n">Double</span><span class="o">&gt;</span> <span class="n">con</span><span class="o">)</span><span class="o">{</span>
        <span class="n">con</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">money</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="suppliert-供给型接口">Supplier<T> 供给型接口</h4>
<p>没有参数，返回一个T类型的值
包含方法 T get()</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">        <span class="c1">//lambda 表达式
</span><span class="c1"></span>        <span class="n">Supplier</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">sup</span> <span class="o">=</span> <span class="o">(</span><span class="o">)</span> <span class="o">-</span><span class="o">&gt;</span> <span class="n">employee</span><span class="o">.</span><span class="na">getName</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sup</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="functiontr-函数型接口">Function&lt;T,R&gt; 函数型接口</h4>
<p>参数类型为T，返回类型为R：接收一个 T类型的值进行操作，但返回结果为R类型
包含方法 R apply(T t)</p>
<h4 id="predicatet-断定型接口">Predicate<T> 断定型接口</h4>
<p>进行判断的，接受参数为T的类型，返回一个boolean类型的值
包含方法 boolean test(T t)
举个🌰：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testPredicate</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&#34;北京&#34;</span><span class="o">,</span><span class="s">&#34;南京&#34;</span><span class="o">,</span><span class="s">&#34;天津&#34;</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//过滤出带有 京 的字符串
</span><span class="c1"></span>        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">filterString</span> <span class="o">=</span> <span class="n">filterString</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="n">string</span> <span class="o">-</span><span class="o">&gt;</span> <span class="n">string</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">&#34;京&#34;</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">filterString</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">filterString</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">strings</span><span class="o">,</span> <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">pre</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="o">&gt;</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">strings</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">pre</span><span class="o">.</span><span class="na">test</span><span class="o">(</span><span class="n">s</span><span class="o">)</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">s</span><span class="o">)</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="方法引用">方法引用</h2>
<p>当要传递给lambda 体的操作已经有实现的方法时，就可以使用方法引用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">        <span class="c1">//lambda 表达式
</span><span class="c1"></span>        <span class="n">Consumer</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">con</span> <span class="o">=</span> <span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="o">-</span><span class="o">&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">)</span><span class="o">;</span>
        <span class="n">con</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="s">&#34;halo&#34;</span><span class="o">)</span><span class="o">;</span>
        
        <span class="c1">//方法引用的方式
</span><span class="c1"></span>        <span class="n">Consumer</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">con1</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">:</span><span class="o">:</span><span class="n">println</span><span class="o">;</span>
        <span class="n">con1</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="s">&#34;halo&#34;</span><span class="o">)</span><span class="o">;</span>
</code></pre></td></tr></table>
</div>
</div><p>可以看到 Consumer的 accpet方法的接收参数是 字符串类型 s，而且System.out.println也可以接收 字符串 s，这个时候就可以使用方法引用 类名（对象名）::方法名
方法引用 是对 lambda 表达式的进一步简化操作。</p>
<p>我觉得可以简单这样理解： 你的参数和返回值 和你 要引用的参数和返回值一致，就可以使用方法引用。</p>
<ul>
<li>对象名::非静态方法</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">        <span class="c1">//lambda 表达式
</span><span class="c1"></span>        <span class="n">Supplier</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">sup</span> <span class="o">=</span> <span class="o">(</span><span class="o">)</span> <span class="o">-</span><span class="o">&gt;</span> <span class="n">employee</span><span class="o">.</span><span class="na">getName</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sup</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//方法引用
</span><span class="c1"></span>        <span class="n">Supplier</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">sup1</span> <span class="o">=</span> <span class="n">employee</span><span class="o">:</span><span class="o">:</span><span class="n">getName</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sup1</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>类名::静态方法</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">        <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">comparator1</span> <span class="o">=</span> <span class="o">(</span><span class="n">o1</span><span class="o">,</span> <span class="n">o2</span><span class="o">)</span> <span class="o">-</span><span class="o">&gt;</span> <span class="n">Integer</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">o1</span><span class="o">,</span> <span class="n">o2</span><span class="o">)</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">comparator1</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">1</span><span class="o">,</span><span class="n">2</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>
        
        <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">comparator2</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">:</span><span class="o">:</span><span class="n">compare</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">comparator2</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">1</span><span class="o">,</span><span class="n">2</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>类名::非静态方法
这种使用就比较特殊了，它并不符合 参数和返回值相同就可以使用 方法引用 的原则。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">        <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">com</span> <span class="o">=</span> <span class="o">(</span><span class="n">s1</span><span class="o">,</span> <span class="n">s2</span><span class="o">)</span> <span class="o">-</span><span class="o">&gt;</span> <span class="n">s1</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">s2</span><span class="o">)</span><span class="o">;</span>
        <span class="n">com</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">,</span><span class="s">&#34;abd&#34;</span><span class="o">)</span><span class="o">;</span>

        <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">com2</span> <span class="o">=</span> <span class="n">String</span><span class="o">:</span><span class="o">:</span><span class="n">compareTo</span><span class="o">;</span>
        <span class="n">com2</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="s">&#34;abc&#34;</span><span class="o">,</span><span class="s">&#34;abd&#34;</span><span class="o">)</span><span class="o">;</span>
</code></pre></td></tr></table>
</div>
</div><p>第一个参数作为了方法调用者出现, s1.compareTo(s2)，这个时候也是可以 方法引用的。</p>
<h2 id="stream-api">Stream API</h2>
<p>java8 另一个重要的改变就是 Stream API，它给我们提供了对集合数据的操作，有点类似于 sql 的查询操作。当 数据库使用 nosql 的时候，岂不是能出现神奇的效果。
相比于Collection在内存中的存储，stream 更多的是是对数据的操作。</p>
<p>Stream 有三个步骤
创建  -&gt;  中间操作  -&gt; 终止操作</p>
<ul>
<li>
<p>创建：通过  集合，数组，获取一个 stream对象</p>
</li>
<li>
<p>中间操作：一个中间操作链，对数据执行完操作后返回当前这个 stream对象，是链式的。中间操作在没有执行 终止操作 前是不会 执行的。</p>
</li>
<li>
<p>终止操作：一旦执行，就会产生结果，之后这个stream 不能再被使用</p>
</li>
</ul>
<h3 id="stream-的创建">Stream 的创建</h3>
<p>这个就比较简单了，java8在 Collection 接口中添加了 stream的默认方法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">strings</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="o">&gt;</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">strings</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;hello&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">strings</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;java8&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">strings</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;nihao&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">strings</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="c1">//返回一个顺序流
</span><span class="c1"></span>        <span class="n">Stream</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">strings</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//返回一个并行流
</span><span class="c1"></span>        <span class="n">Stream</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">stringStream</span> <span class="o">=</span> <span class="n">strings</span><span class="o">.</span><span class="na">parallelStream</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
</code></pre></td></tr></table>
</div>
</div><p>当然你也可以通过数组来获取，而且 Stream中也有一个of()的静态方法来获取 stream 对象</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">        <span class="n">Stream</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">stringStream1</span> <span class="o">=</span> <span class="n">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">&#34;123&#34;</span><span class="o">,</span> <span class="s">&#34;456&#34;</span><span class="o">,</span> <span class="s">&#34;789&#34;</span><span class="o">)</span><span class="o">;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="stream-的中间操作">Stream 的中间操作</h3>
<h4 id="筛选与切片">筛选与切片</h4>
<ul>
<li>filter(Predicate p) 从流中排出某些元素</li>
<li>limit(n) 截断流，使流中元素个数不超过n</li>
<li>skip(n) 跳过元素，返回一个扔掉前n个的流，若流中元素个数不足n个，则返回一个空流</li>
<li>distinct() 筛选去除重复元素</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">strings</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="o">&gt;</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">strings</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;hello&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">strings</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;java8&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">strings</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;nihao&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">strings</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">strings</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&#34;nihao&#34;</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//去除a这个元素
</span><span class="c1"></span>        <span class="n">strings</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="o">)</span>
                <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="o">(</span><span class="n">s</span> <span class="o">-</span><span class="o">&gt;</span> <span class="o">!</span><span class="n">s</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&#34;a&#34;</span><span class="o">)</span><span class="o">)</span><span class="o">)</span>
                <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">:</span><span class="o">:</span><span class="n">println</span><span class="o">)</span><span class="o">;</span>

        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//只要前两个元素
</span><span class="c1"></span>        <span class="n">strings</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="o">)</span>
                <span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="n">2</span><span class="o">)</span>
                <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">:</span><span class="o">:</span><span class="n">println</span><span class="o">)</span><span class="o">;</span>

        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//去除前两个元素
</span><span class="c1"></span>        <span class="n">strings</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="o">)</span>
                <span class="o">.</span><span class="na">skip</span><span class="o">(</span><span class="n">2</span><span class="o">)</span>
                <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">:</span><span class="o">:</span><span class="n">println</span><span class="o">)</span><span class="o">;</span>

        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//去除重复元素 nihao 
</span><span class="c1"></span>        <span class="n">strings</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="o">)</span>
                <span class="o">.</span><span class="na">distinct</span><span class="o">(</span><span class="o">)</span>
                <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">:</span><span class="o">:</span><span class="n">println</span><span class="o">)</span><span class="o">;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="映射">映射</h4>
<h5 id="map">map</h5>
<p>map(Function f) 接收一个一个函数作为参数（lambda表达式），该函数会被作用到每一个元素上，并将其映射成一个新的元素.(也就是 函数型接口)
将集合中所有的字符串变为大写,并过滤出长度大于2的字符串</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">stringStream</span>  <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">&#34;aa&#34;</span><span class="o">,</span> <span class="s">&#34;bb&#34;</span><span class="o">,</span> <span class="s">&#34;cc&#34;</span><span class="o">,</span> <span class="s">&#34;ddd&#34;</span><span class="o">,</span> <span class="s">&#34;eeee&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">stringStream</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="o">)</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="o">-</span><span class="o">&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">toUpperCase</span><span class="o">(</span><span class="o">)</span><span class="o">)</span>
                <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">s</span> <span class="o">-</span><span class="o">&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">(</span><span class="o">)</span> <span class="o">&gt;</span> <span class="n">2</span><span class="o">)</span>
                <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">:</span><span class="o">:</span><span class="n">println</span><span class="o">)</span><span class="o">;</span>
</code></pre></td></tr></table>
</div>
</div><h5 id="flatmap">flatMap</h5>
<p>flatMap(Function f)接收一个函数作为参数，将流中的每一个元素都变成另一种类型单独的流，再将所有的流合成一个流
这个方法有点难度。
可以举个例子看一下,还是上边的 stringStream</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[</span><span class="o">]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">//可以看一下返回类型是 Stream&lt;Stream&lt;Character&gt;&gt;  这种套娃型的
</span><span class="c1"></span>            <span class="n">Stream</span><span class="o">&lt;</span><span class="n">Stream</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">&gt;</span><span class="o">&gt;</span> <span class="n">streamStream</span> <span class="o">=</span> <span class="n">stringStream</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">Test</span><span class="o">:</span><span class="o">:</span><span class="n">fromStringToStream</span><span class="o">)</span><span class="o">;</span>
            <span class="c1">//如果这时要进行元素便利的话,需要进行双层循环
</span><span class="c1"></span>            <span class="n">streamStream</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">characterStream</span> <span class="o">-</span><span class="o">&gt;</span> <span class="o">{</span>
                <span class="n">characterStream</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">:</span><span class="o">:</span><span class="n">println</span><span class="o">)</span><span class="o">;</span>
            <span class="o">}</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Stream</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">&gt;</span> <span class="nf">fromStringToStream</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="o">&gt;</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

        <span class="k">for</span> <span class="o">(</span><span class="n">Character</span> <span class="n">c</span> <span class="o">:</span> <span class="n">str</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">(</span><span class="o">)</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">c</span><span class="o">)</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">list</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>

</code></pre></td></tr></table>
</div>
</div><p>Stream&lt; Stream&lt; Character &raquo;这种套娃型的stream 最好使用 flatMap，它会自动帮你把这些里边的全部的Stream&lt; Character &gt;打开变成一个 Stream&lt; Character &gt;
使用flatMap后就变成了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">        <span class="n">stringStream</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="o">)</span>
                <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">Test</span><span class="o">:</span><span class="o">:</span><span class="n">fromStringToStream</span><span class="o">)</span>
                <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">:</span><span class="o">:</span><span class="n">println</span><span class="o">)</span><span class="o">;</span>
</code></pre></td></tr></table>
</div>
</div><p>看起来简洁的许多。</p>
<h3 id="stream-的终止操作">stream 的终止操作</h3>
<h4 id="匹配和分类">匹配和分类</h4>
<ul>
<li>allMatch(Predicate p) 接收一个断定型接口，判断是否所有元素符合条件，符合则返回true</li>
<li>anyMatch(Predicate p) 判断是否有一个元素符合条件，如果符合，返回true</li>
<li>noneMatch(Predicate p) 检查是否没有匹配的元素，如果有匹配上的，返回false</li>
<li>findFirst() 获取第一个元素</li>
<li>findAny() 返回流中任意一个元素</li>
<li>count() 获取流中元素的个数</li>
<li>max(Comparator com)</li>
<li>min(Comparator com)</li>
<li>forEach(Consumer con)</li>
</ul>
<h4 id="归约">归约</h4>
<ul>
<li>reduce(T identity, BinaryOperator) 将流中的元素反复结合起来，得到一个值, identity 是初始值。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">        <span class="c1">//reduce(T identity, BinaryOperator) 将流中的元素反复结合起来，得到一个值, identity 是初始值。
</span><span class="c1"></span>        <span class="c1">//1 + 2 的结果再作为第一个值，再将第三个元素3作为第二值，循环往复
</span><span class="c1"></span>        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">integers</span>  <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">1</span><span class="o">,</span> <span class="n">2</span><span class="o">,</span> <span class="n">3</span><span class="o">,</span> <span class="n">4</span><span class="o">,</span> <span class="n">5</span><span class="o">)</span><span class="o">;</span>
        <span class="n">Integer</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">integers</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="o">)</span><span class="o">.</span><span class="na">reduce</span><span class="o">(</span><span class="n">0</span><span class="o">,</span> <span class="n">Integer</span><span class="o">:</span><span class="o">:</span><span class="n">sum</span><span class="o">)</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sum</span><span class="o">)</span><span class="o">;</span>
</code></pre></td></tr></table>
</div>
</div><p>1 + 2 的结果再作为第一个值，再将第三个元素3作为第二值，两次再次相加的结果作为第一值，循环往复。
当然如果你不是设置identity的值的话，reduce(BinaryOperator)还是有这个只有一个形参的方法，只不过返回的是一个optoinal&lt;&gt;的值</p>
<h4 id="收集">收集</h4>
<p>collet(Collector c) 将流中的结果转换成一个Collector（集合）出来</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">        <span class="c1">//获取元素长度大于2的集合
</span><span class="c1"></span>       <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">collect</span> <span class="o">=</span> <span class="n">stringStream</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="o">)</span>
               <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">s</span> <span class="o">-</span><span class="o">&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">(</span><span class="o">)</span> <span class="o">&gt;</span> <span class="n">2</span><span class="o">)</span>
               <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://gejigejiemmm.github.io/categories/java/">java</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://gejigejiemmm.github.io/tags/java%E9%AB%98%E7%BA%A7/">java高级</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>java中的反射</title>
                <link>https://gejigejiemmm.github.io/posts/reflection/</link>
                <guid isPermaLink="true">https://gejigejiemmm.github.io/posts/reflection/</guid>
                <pubDate>Wed, 04 Mar 2020 17:07:27 +0800</pubDate>
                
                    <author>787356076 (gejigejiemmm)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
                
                    <description><![CDATA[<h2 id="目录结构">目录结构</h2>
<p>[TOC]</p>
<h2 id="反射">反射</h2>
<p>反射是动态性的
反射机制允许，在程序运行期间，使用反射来获取任何类的内部信息，并能操作任何类的属性和方法，框架中常有用到</p>
<p>在java中，加载完之后，会在堆内存中的方法区中会生成一个 Class类型对象（一个类只有一个Class对象）这个对象包含了这个类完整的结构信息</p>
<p>一般情况下
我们都是引入需要的包类名称 -&gt; 然后通过 new 实例化-&gt;取得实例化对象</p>
<p>而在反射情况下
实例化对象-&gt; getClass -&gt; 得到完整的包类名称</p>
<h3 id="关于java中-javalangclass类的理解">关于java中 java.lang.Class类的理解</h3>
<p>从类的加载过程来看：</p>
<p>程序在经过javac 命令以后会生成一个或多个 class（字节码）文件
接着我们使用java 这个命令对字节码文件进行解释运行，将其加载到内存中，（加载到内存中的过程，就称为类的加载）
加载到内存中的类，我们称之为运行时类，此运行时类就作为 Class 的一个实例</p>
<p>换句话说，Class对象对应着一个运行时类</p>
<h3 id="获取-class-对象的方式">获取 Class 对象的方式</h3>
<p>前三个要求掌握，其中，第三个使用频率更多</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">        <span class="c1">//方式一
</span><span class="c1"></span>        <span class="n">Class</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">Person</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
        <span class="c1">//Class&lt;Person&gt; clazz = Person.class;
</span><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">clazz</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//方式二
</span><span class="c1"></span>        <span class="n">Person</span> <span class="n">p1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">Class</span> <span class="n">clazz1</span> <span class="o">=</span> <span class="n">p1</span><span class="o">.</span><span class="na">getClass</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">clazz1</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//方式三
</span><span class="c1"></span>        <span class="c1">//调用Class 的静态方法 forName ( String classPath)
</span><span class="c1"></span>        <span class="n">Class</span><span class="o">&lt;</span><span class="o">?</span><span class="o">&gt;</span> <span class="n">clazz2</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;reflection.Person&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">clazz2</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//方式四，作了解，不要求掌握
</span><span class="c1"></span>        <span class="n">ClassLoader</span> <span class="n">classLoader</span> <span class="o">=</span> <span class="n">ReflectionTest</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">Class</span> <span class="n">clazz4</span> <span class="o">=</span> <span class="n">classLoader</span><span class="o">.</span><span class="na">loadClass</span><span class="o">(</span><span class="s">&#34;reflection.Person&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">clazz4</span><span class="o">)</span><span class="o">;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="通过反射创建运行时类的对象">通过反射创建运行时类的对象</h3>
<p>使用反射创建运行时对象，可以使用 Class.forName(String classPath)
这个方法来获取运行时对象 然后通过 newInstance() 方法获取类的对象。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">        <span class="n">Class</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">clazz</span> <span class="o">=</span> <span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span><span class="o">)</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;reflection.Person&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">Person</span> <span class="n">o</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">o</span><span class="o">)</span><span class="o">;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="体现反射的动态性">体现反射的动态性</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ClassNotFoundException</span><span class="o">,</span> <span class="n">IllegalAccessException</span><span class="o">,</span> <span class="n">InstantiationException</span> <span class="o">{</span>
        <span class="c1">//体现反射的 动态性
</span><span class="c1"></span>        <span class="kt">int</span> <span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">(</span><span class="o">)</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="n">3</span><span class="o">)</span><span class="o">;</span><span class="c1">//0,1,2
</span><span class="c1"></span>        <span class="n">String</span> <span class="n">classPath</span> <span class="o">=</span> <span class="s">&#34;&#34;</span><span class="o">;</span>
        <span class="k">switch</span> <span class="o">(</span><span class="n">random</span><span class="o">)</span><span class="o">{</span>
            <span class="k">case</span> <span class="n">0</span><span class="o">:</span>
                <span class="n">classPath</span> <span class="o">=</span> <span class="s">&#34;java.lang.String&#34;</span><span class="o">;</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">case</span> <span class="n">1</span><span class="o">:</span>
                <span class="n">classPath</span> <span class="o">=</span> <span class="s">&#34;reflection.Person&#34;</span><span class="o">;</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">case</span> <span class="n">2</span><span class="o">:</span>
                <span class="n">classPath</span> <span class="o">=</span> <span class="s">&#34;java.lang.Object&#34;</span><span class="o">;</span>
                <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">Object</span> <span class="n">instance</span> <span class="o">=</span> <span class="n">getInstance</span><span class="o">(</span><span class="n">classPath</span><span class="o">)</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">instance</span><span class="o">.</span><span class="na">getClass</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>

    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">getInstance</span><span class="o">(</span><span class="n">String</span> <span class="n">classPath</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ClassNotFoundException</span><span class="o">,</span> <span class="n">IllegalAccessException</span><span class="o">,</span> <span class="n">InstantiationException</span> <span class="o">{</span>
        <span class="n">Class</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="n">classPath</span><span class="o">)</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">clazz</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="反射机制与对象的封装行矛盾吗">反射机制与对象的封装行矛盾吗？</h3>
<p>不矛盾
封装里private 更想告诉你，这个方法你是用不到的，就不要用了，一般是我自己内部使用的。
我给你公开提供的方法，更好
尽管我把权限私有起来了，但是你非要调用的话，也不是不可以，但一般你要通过反射之后自己做的操作，我在公开方法里都给你做好了。那又何必呢</p>
<h3 id="通过反射获取运行时类的完整结构">通过反射获取运行时类的完整结构</h3>
<h4 id="获取运行时类的属性">获取运行时类的属性</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">TestField</span><span class="o">(</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ClassNotFoundException</span> <span class="o">{</span>

        <span class="n">Class</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;reflection.Test.Person&#34;</span><span class="o">)</span><span class="o">;</span>

        <span class="n">Field</span><span class="o">[</span><span class="o">]</span> <span class="n">fields</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getFields</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//会发现都是 public 标识的成员变量，且包含父类属性
</span><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="n">Field</span> <span class="n">f</span> <span class="o">:</span> <span class="n">fields</span><span class="o">)</span><span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">f</span><span class="o">)</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------------&#34;</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//获取当前类自己定义的所有（不看权限修饰符）属性，但不包括父类属性
</span><span class="c1"></span>        <span class="n">Field</span><span class="o">[</span><span class="o">]</span> <span class="n">declaredFields</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredFields</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

        <span class="k">for</span> <span class="o">(</span><span class="n">Field</span> <span class="n">f</span> <span class="o">:</span> <span class="n">declaredFields</span><span class="o">)</span><span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">f</span><span class="o">)</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;------------------&#34;</span><span class="o">)</span><span class="o">;</span>

        <span class="k">for</span> <span class="o">(</span><span class="n">Field</span> <span class="n">f</span> <span class="o">:</span> <span class="n">declaredFields</span><span class="o">)</span><span class="o">{</span>
            <span class="c1">//权限修饰符,但是返回的是 int 类型，这个时候我们要转为string类型 Modifier.toString()
</span><span class="c1"></span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">Modifier</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">f</span><span class="o">.</span><span class="na">getModifiers</span><span class="o">(</span><span class="o">)</span><span class="o">)</span> <span class="o">+</span> <span class="s">&#34;\t&#34;</span><span class="o">)</span><span class="o">;</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">f</span><span class="o">.</span><span class="na">getType</span><span class="o">(</span><span class="o">)</span><span class="o">.</span><span class="na">getName</span><span class="o">(</span><span class="o">)</span> <span class="o">+</span> <span class="s">&#34;\t&#34;</span><span class="o">)</span><span class="o">;</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">f</span><span class="o">.</span><span class="na">getName</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>
        <span class="o">}</span>

    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>其他的可以不加演示，以获取属性为例：你可以从代码里发现
直接getXXX() 获取的是包含父类的，但是权限修饰符 必须是 public
如果 getDeclaredXXX()方法的话， 获取的是自己所定义的所有的，不包含父类，不受访问权限约束
获取运行时类的方法结构同理</p>
<h4 id="获取运行时类的方法">获取运行时类的方法</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">TestMethod</span><span class="o">(</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ClassNotFoundException</span> <span class="o">{</span>
        <span class="n">Class</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&#34;reflection.Test.Person&#34;</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//获取 当前类和父类 public权限的方法
</span><span class="c1"></span>        <span class="n">Method</span><span class="o">[</span><span class="o">]</span> <span class="n">methods</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getMethods</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

        <span class="k">for</span> <span class="o">(</span><span class="n">Method</span> <span class="n">method</span> <span class="o">:</span><span class="n">methods</span><span class="o">)</span><span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">method</span><span class="o">)</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;---------------&#34;</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//获取当前运行时类 当中的所有方法， 不包含父类，不在乎权限
</span><span class="c1"></span>        <span class="n">Method</span><span class="o">[</span><span class="o">]</span> <span class="n">declaredMethods</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredMethods</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

        <span class="k">for</span> <span class="o">(</span><span class="n">Method</span> <span class="n">method</span><span class="o">:</span><span class="n">declaredMethods</span><span class="o">)</span><span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">method</span><span class="o">)</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;---------------&#34;</span><span class="o">)</span><span class="o">;</span>


        <span class="c1">//获取方法具体结构， 权限符 返回值 方法名字 (参数类型 参数名 )
</span><span class="c1"></span>        <span class="k">for</span> <span class="o">(</span><span class="n">Method</span> <span class="n">method</span><span class="o">:</span><span class="n">declaredMethods</span><span class="o">)</span><span class="o">{</span>

            <span class="c1">//获取注解
</span><span class="c1"></span>            <span class="n">Annotation</span><span class="o">[</span><span class="o">]</span> <span class="n">annotations</span> <span class="o">=</span> <span class="n">method</span><span class="o">.</span><span class="na">getAnnotations</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
            <span class="k">for</span> <span class="o">(</span><span class="n">Annotation</span> <span class="n">annotation</span> <span class="o">:</span><span class="n">annotations</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">annotation</span> <span class="o">+</span> <span class="s">&#34;\t&#34;</span><span class="o">)</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="c1">//获取权限修饰符
</span><span class="c1"></span>            <span class="kt">int</span> <span class="n">modifiers</span> <span class="o">=</span> <span class="n">method</span><span class="o">.</span><span class="na">getModifiers</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">Modifier</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">modifiers</span><span class="o">)</span> <span class="o">+</span> <span class="s">&#34;\t&#34;</span><span class="o">)</span><span class="o">;</span>

            <span class="c1">//返回值类型
</span><span class="c1"></span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">getReturnType</span><span class="o">(</span><span class="o">)</span><span class="o">.</span><span class="na">getName</span><span class="o">(</span><span class="o">)</span> <span class="o">+</span> <span class="s">&#34;\t&#34;</span><span class="o">)</span><span class="o">;</span>

            <span class="c1">//方法名
</span><span class="c1"></span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">method</span><span class="o">.</span><span class="na">getName</span><span class="o">(</span><span class="o">)</span> <span class="o">+</span> <span class="s">&#34;\t(&#34;</span><span class="o">)</span><span class="o">;</span>

            <span class="c1">//形参列表
</span><span class="c1"></span>            <span class="n">Class</span><span class="o">&lt;</span><span class="o">?</span><span class="o">&gt;</span><span class="o">[</span><span class="o">]</span> <span class="n">parameterTypes</span> <span class="o">=</span> <span class="n">method</span><span class="o">.</span><span class="na">getParameterTypes</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

            <span class="k">if</span> <span class="o">(</span><span class="o">!</span><span class="o">(</span><span class="n">parameterTypes</span><span class="o">.</span><span class="na">length</span> <span class="o">=</span><span class="o">=</span> <span class="n">0</span> <span class="o">|</span><span class="o">|</span> <span class="n">parameterTypes</span> <span class="o">=</span><span class="o">=</span> <span class="kc">null</span> <span class="o">)</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">parameterTypes</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="o">)</span><span class="o">{</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">=</span><span class="o">=</span> <span class="n">parameterTypes</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">1</span><span class="o">)</span><span class="o">{</span>
                        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">parameterTypes</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="o">.</span><span class="na">getName</span><span class="o">(</span><span class="o">)</span> <span class="o">+</span> <span class="s">&#34;  args_&#34;</span> <span class="o">+</span> <span class="n">i</span><span class="o">)</span><span class="o">;</span>
                    <span class="o">}</span><span class="k">else</span> <span class="o">{</span>
                        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">parameterTypes</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="o">.</span><span class="na">getName</span><span class="o">(</span><span class="o">)</span> <span class="o">+</span> <span class="s">&#34;  args_&#34;</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="s">&#34;,&#34;</span><span class="o">)</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&#34;)&#34;</span><span class="o">)</span><span class="o">;</span>


            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
            
        <span class="o">}</span>

    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="获得运行时类的指定结构">获得运行时类的指定结构</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">        <span class="n">Class</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">Person</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>
        <span class="c1">//通过反射创建对象
</span><span class="c1"></span>        <span class="c1">//获取构造器
</span><span class="c1"></span>        <span class="n">Constructor</span> <span class="n">constructor</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredConstructor</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="kt">int</span><span class="o">.</span><span class="na">class</span><span class="o">)</span><span class="o">;</span>
        <span class="n">Object</span> <span class="n">tom</span> <span class="o">=</span> <span class="n">constructor</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="s">&#34;tom&#34;</span><span class="o">,</span> <span class="n">12</span><span class="o">)</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">tom</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//通过反射。调用对象指定的属性和方法,这个时候，还不能直接获取private 修饰的属性
</span><span class="c1"></span>        <span class="n">Field</span> <span class="n">age</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&#34;age&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">age</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">tom</span><span class="o">,</span><span class="n">10</span><span class="o">)</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">tom</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//通过反射调用方法
</span><span class="c1"></span>        <span class="n">Method</span> <span class="n">show</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredMethod</span><span class="o">(</span><span class="s">&#34;show&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">show</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">tom</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//通过反射调用私有结构
</span><span class="c1"></span>        <span class="n">Constructor</span> <span class="n">constructor1</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredConstructor</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">)</span><span class="o">;</span>
        <span class="n">constructor1</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span><span class="o">;</span>
        <span class="n">Person</span> <span class="n">jerry</span> <span class="o">=</span> <span class="o">(</span><span class="n">Person</span><span class="o">)</span> <span class="n">constructor1</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="s">&#34;jerry&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">jerry</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//调用私有的属性
</span><span class="c1"></span>        <span class="n">Field</span> <span class="n">name</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&#34;name&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">name</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span><span class="o">;</span>
        <span class="n">name</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">tom</span><span class="o">,</span><span class="s">&#34;jerry&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">tom</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//调用私有方法,有参数的话，要指定参数类型
</span><span class="c1"></span>        <span class="n">Method</span> <span class="n">hello</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getDeclaredMethod</span><span class="o">(</span><span class="s">&#34;hello&#34;</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">)</span><span class="o">;</span>
        <span class="n">hello</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span><span class="o">;</span>
        <span class="n">String</span> <span class="n">returnValue</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">hello</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">jerry</span><span class="o">,</span> <span class="s">&#34;tom&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">returnValue</span><span class="o">)</span><span class="o">;</span>
</code></pre></td></tr></table>
</div>
</div><p>这个与获取完整结构不同之处就是参数不同，指定出你要的方法名。
但是注意，如果你要获取的是 private 要设置 XXX.setAccessible(true);来保证当前方法可以被访问，否则会报错。</p>
<p>当你获取方法时，如果需要参数，那么就要指定参数类型，如果你想调用这个方法，那么就需要使用 invoke() 这个方法去执行，如果被调用的这个方法有返回值，那么 invoke方法会帮你返回这个值</p>
<p>invoke() 第一个参数是 调用类，也就是你需要调用哪个对象的该方法
举例来讲： hello.invoke(jerry, &ldquo;tom&rdquo;); 要调用的是 jerry.hello();
如果该类里面没有 hello 这个方法，则报错。</p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://gejigejiemmm.github.io/categories/java/">java</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://gejigejiemmm.github.io/tags/java%E9%AB%98%E7%BA%A7/">java高级</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>小白都能理解的java注解</title>
                <link>https://gejigejiemmm.github.io/posts/annotation/</link>
                <guid isPermaLink="true">https://gejigejiemmm.github.io/posts/annotation/</guid>
                <pubDate>Wed, 04 Mar 2020 10:14:08 +0800</pubDate>
                
                    <author>787356076 (gejigejiemmm)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
                
                    <description><![CDATA[<h2 id="目录结构">目录结构</h2>
<p>[TOC]</p>
<h2 id="java-中的注解">java 中的注解</h2>
<p>jdk 5.0 新增了注解
注解就是代码里的特殊标记以@开头，这些标记可以在编译，
类加载，运行时，被读取。在不改变原有逻辑上，执行一些操作
以至于在源文件中补充一些信息
常言道： 框架 = 注解 + 反射 + 设计模式
现在主流的spring全家桶，甚至myabtis等主流框架，都支持了注解，省去了繁琐的xml配置文件</p>
<p>jdk 内置了3个注解，这些就不说了</p>
<ul>
<li>@Override:限定重写父类方法，该注解只能用于方法，一般继承或者实现接口的时候，编译器都会生成</li>
<li>@Deprecated：用于提示所修饰的元素（方法，类）已过时</li>
<li>@SuppressWarnings()：忽视编译器警告,idea 中一般用不到哈哈。</li>
</ul>
<h3 id="最简单的自定义接口">最简单的自定义接口</h3>
<p>这才是重中之重啊，后边看到反射，再搭配使用效果更佳。
如何自定义注解？</p>
<p>Annotation 中的属性看起来像无参方法，但要注意，他不是方法啊，他是成员变量。
类型只能是八种基本类型.
如果只有一个属性了，那建议用value命名
如果没有属性，我们称之为标记
如果想设置默认值，就要用 default 来定义了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="cm">/**
</span><span class="cm"> * 自定义注解
</span><span class="cm"> */</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="n">MyAnnotation</span> <span class="o">{</span>

    <span class="n">String</span>  <span class="nf">value</span><span class="o">(</span><span class="o">)</span> <span class="k">default</span> <span class="s">&#34;hello&#34;</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>这样最简单的注解就完成了！
使用的时候 只需要  @MyAnnotation(value = &ldquo;hello&rdquo;) 就可以</p>
<h3 id="元注解">元注解</h3>
<p>jdk 中的元注解就是修饰注解的注解（疯狂套娃）
jdk 中有四种元注解</p>
<h4 id="retention-用于指定-被修饰的annotation-的生命周期">@Retention 用于指定 被修饰的Annotation 的生命周期</h4>
<p>内部包含了一个 RetentionPolicy 类型的成员变量可以指定三个值</p>
<ul>
<li>RetentionPolicy.SOURCE
在编译（javac 命令）的时候就没了，class文件中不会保留该注解</li>
<li>RetentionPolicy.CLASS
编译后保留在class文件中，但是在执行java 命令的时候就不会加载了</li>
<li>RetentionPolicy.RUNTIME
编译有，运行的时候也有，甚至加载在内存中了</li>
</ul>
<p>一般情况下都会通过反射来获取注解的内容，所以大多时候都是 指定为 运行时即RetentionPolicy.RUNTIME</p>
<h4 id="target">@Target</h4>
<p>用于指定该注解能够修饰那些元素，比如说类，方法，属性
可用的值为：
TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE, TYPE_PARAMETER, TYPE_USE
其中：
TYPE: 表示可用于修饰类
FIELD: 表示可用于修饰属性
TYPE_PARAMETER: 表示可用在范型上，jdk8新特性
TYPE_USE: 只要是类型上都可以使用注解，jdk8新特性，可以先不理解
其他的应该一眼就明白修饰什么吧？嘿嘿</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@Retention</span><span class="o">(</span><span class="n">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>
<span class="nd">@Target</span><span class="o">(</span><span class="o">{</span><span class="n">ElementType</span><span class="o">.</span><span class="na">METHOD</span><span class="o">,</span><span class="n">ElementType</span><span class="o">.</span><span class="na">TYPE</span><span class="o">}</span><span class="o">)</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="n">MyAnnotation</span> <span class="o">{</span>

    <span class="n">String</span>  <span class="nf">value</span><span class="o">(</span><span class="o">)</span> <span class="k">default</span> <span class="s">&#34;hello&#34;</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>如果没有使用@Target 注解，那么默认所有都可以使用</p>
<h4 id="documented-和-inherited">@Documented 和 @Inherited</h4>
<p>这两个注解一般用不上
使用 @Documented注解时，执行 javadoc 命令可以提取出文档
使用时 @Inherited注解时 ，其子类也会带上该类注解（也就是注解也具有继承性了）</p>
<h3 id="通过反射获取注解信息">通过反射获取注解信息</h3>
<p>暂存</p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://gejigejiemmm.github.io/categories/java/">java</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://gejigejiemmm.github.io/tags/java%E9%AB%98%E7%BA%A7/">java高级</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>java 多线程的入门学习</title>
                <link>https://gejigejiemmm.github.io/posts/thread/</link>
                <guid isPermaLink="true">https://gejigejiemmm.github.io/posts/thread/</guid>
                <pubDate>Wed, 04 Mar 2020 09:40:27 +0800</pubDate>
                
                    <author>787356076 (gejigejiemmm)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
                
                    <description><![CDATA[<h2 id="目录结构">目录结构</h2>
<p>[TOC]</p>
<h2 id="多线程">多线程</h2>
<h3 id="程序进程线程的基本概念">程序、进程、线程的基本概念</h3>
<p>程序</p>
<p>是为了完成特定的任务，用某种语言编写的一组指令的集合。即指一段特定的静态的代码。</p>
<p>进程</p>
<p>正在运行中的程序，（程序的一次执行过程），加载在内存中，操作系统会为进程分配内存空间，是动态（交换数据）的。</p>
<p>线程</p>
<p>进程进一步划分为线程，是程序内部的一条执行路径。并行的去执行多条线程，称之为多线程。
（新建一条线程：主程序新开一条线程，并行的执行）</p>
<p>进程和线程的关系：一个进程可能会有多个线程，多个线程共享进程的内存资源。</p>
<h3 id="线程的创建和使用">线程的创建和使用</h3>
<h4 id="1-声明一个类继承thread类重写run方法">1. 声明一个类，继承Thread类，重写run()方法</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="cm">/**
</span><span class="cm"> * 多线程的创建
</span><span class="cm"> * 方式一
</span><span class="cm"> * 继承 Thread
</span><span class="cm"> * 重写 run方法
</span><span class="cm"> * 调用 start方法启动
</span><span class="cm"> *
</span><span class="cm"> * 例子：遍历100以内的偶数
</span><span class="cm"> */</span>

<span class="c1">//1. 继承 Thread 类
</span><span class="c1"></span><span class="kd">class</span> <span class="nc">MyThread</span> <span class="kd">extends</span> <span class="n">Thread</span><span class="o">{</span>

    <span class="c1">//2. 重写 run 方法
</span><span class="c1"></span>    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span><span class="o">=</span> <span class="n">100</span><span class="o">;</span> <span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="o">)</span><span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="n">2</span> <span class="o">=</span><span class="o">=</span> <span class="n">0</span><span class="o">)</span><span class="o">{</span>
                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">(</span><span class="o">)</span><span class="o">.</span><span class="na">getName</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreadTest</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[</span><span class="o">]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">//3. 创建对象
</span><span class="c1"></span>        <span class="n">MyThread</span> <span class="n">t1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyThread</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="c1">//4. 开始线程
</span><span class="c1"></span>        <span class="n">t1</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>调用start()方法会自动调用该线程的run()方法</p>
<p>问题1 ：那么能否不调用satrt()方法,直接去调用run()方法呢？</p>
<p>不可以！！！！</p>
<p>直接调用run()方法时，实际上还是main线程
Thread.currentThread().getName() 可以使用这个方法获取线程名字测试一下</p>
<p>问题2 ： 能使用start方法，再创建一个线程吗？</p>
<p>不可以！！！！！
一个线程只能开启一次，二次调用 start 则会报 java.lang.IllegalThreadStateException 异常</p>
<h5 id="thread-的常见方法">Thread 的常见方法</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="cm">/**
</span><span class="cm"> * Thread 的常用方法
</span><span class="cm"> * 1. start() 启动线程
</span><span class="cm"> * 2. run() 当前线程要执行的操作
</span><span class="cm"> * 3. getName() 获取线程的名字
</span><span class="cm"> * 4. currentThread() 静态方法，返回当前执行的线程
</span><span class="cm"> * 5. setName() 设置线程的名字
</span><span class="cm"> * 6. yield() 释放cpu执行权
</span><span class="cm"> * 7. join() 线程a中调用线程b的join方法，a进入阻塞状态，直到线程b执行完毕，然后a继续执行
</span><span class="cm"> * 8. stop() 强制线程结束,已过时
</span><span class="cm"> * 9. sleep() 让当前线程阻塞等待多少秒
</span><span class="cm"> */</span>
</code></pre></td></tr></table>
</div>
</div><h5 id="线程的优先级">线程的优先级</h5>
<p>getPriority() 获取优先级
setPriority() 设置优先级</p>
<p>优先级:::</p>
<p>Thread.MAX_PRIORITY 10</p>
<p>Thread.NORM_PRIORITY 5 默认情况下</p>
<p>Thread.MAX_PRIORITY 1</p>
<h4 id="2-实现runnable接口">2. 实现Runnable接口</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="cm">/**
</span><span class="cm"> * 创建多线程的方式二：实现Runnable 接口
</span><span class="cm"> * 1. 创建一个实现Runnable接口的类
</span><span class="cm"> * 2. 实现类去实现Runnable接口的抽象方法: run()
</span><span class="cm"> * 3. 创建实现类的对象
</span><span class="cm"> * 4. 将此对象作为参数传递到Thread类的构造器,创建Thread类的对象
</span><span class="cm"> * 5. 调用start()
</span><span class="cm"> */</span>
<span class="kd">class</span> <span class="nc">MThread</span> <span class="kd">implements</span> <span class="n">Runnable</span><span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">100</span><span class="o">;</span> <span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="n">2</span> <span class="o">=</span><span class="o">=</span> <span class="n">0</span><span class="o">)</span><span class="o">{</span>
                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">)</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RunnableTest</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[</span><span class="o">]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">MThread</span> <span class="n">t1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MThread</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="c1">//调用的是当前线程的run --》(但是调用了Runnable类型的run方法）
</span><span class="c1"></span>        <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">t1</span><span class="o">)</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><h5 id="两种方法的比较">两种方法的比较</h5>
<p>Thread类其实也实现了Runnable接口，所以比较推荐第二种，同时第二种方式也打破了extends的单继承性</p>
<h3 id="线程的生命周期">线程的生命周期</h3>
<p>Thread.State 的变量指代表线程的状态</p>
<p>New：新建，当一个Thread类或其子类的对象被创建时，新生的线程对象处于新建状态</p>
<p>就绪，当线程被satrt()后，将进入线程队列等待cpu的调用</p>
<p>运行，当cpu调用该线程的时候</p>
<p>阻塞，当该线程被人为挂起或执行输入输出操作时，中断自己的执行，让出cpu控制权</p>
<p>死亡，线程完成了自己的任务，或被强制结束，或异常退出后进入死亡状态</p>
<h3 id="线程的同步">线程的同步</h3>
<h4 id="线程的安全问题与解决">线程的安全问题与解决</h4>
<p>问题：卖票过程中出现重票、错票&ndash;&gt;出现了线程安全问题</p>
<p>问题出现的原因：当某个线程在操作车票的过程中，尚未操作完成，其他线程参与进来也操作车票</p>
<p>解决：在一个线程a在操作ticket的时候，其他线程不能参与进来，直到线程a操作完ticket之后，其他线程才可以操作ticket。
即使线程a出现了阻塞，也不能被改变</p>
<p>在java中我们通过同步机制来解决线程安全问题</p>
<p>方式一：同步代码块</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="cm">/*
</span><span class="cm">    synchronized(同步监视器){
</span><span class="cm">        需要被同步的代码
</span><span class="cm">    }   
</span><span class="cm">
</span><span class="cm">    说明：
</span><span class="cm">    1。操作共享数据的代码，即为被同步的代码
</span><span class="cm">    2。共享数据：多个线程共同操作的数据
</span><span class="cm">    3。同步监视器，俗称：锁。任何一个类的对象都可以充当锁
</span><span class="cm">        要求：多个线程必须共用同一个锁（同一个对象）
</span><span class="cm">*/</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WindowRunnableTest</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[</span><span class="o">]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">WindowRunnable</span> <span class="n">windowRunnable</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WindowRunnable</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

        <span class="n">Thread</span> <span class="n">window1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">windowRunnable</span><span class="o">)</span><span class="o">;</span>
        <span class="n">Thread</span> <span class="n">window2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">windowRunnable</span><span class="o">)</span><span class="o">;</span>
        <span class="n">Thread</span> <span class="n">window3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">windowRunnable</span><span class="o">)</span><span class="o">;</span>

        <span class="n">window1</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;窗口1&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">window2</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;窗口2&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">window3</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;窗口3&#34;</span><span class="o">)</span><span class="o">;</span>

        <span class="n">window1</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">window2</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">window3</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">WindowRunnable</span> <span class="kd">implements</span> <span class="n">Runnable</span><span class="o">{</span>

    <span class="kd">private</span> <span class="kt">int</span> <span class="n">ticket</span> <span class="o">=</span> <span class="n">100</span><span class="o">;</span>
    <span class="c1">//锁
</span><span class="c1"></span>    <span class="n">Object</span> <span class="n">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span><span class="o">{</span>
            <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span><span class="o">{</span><span class="c1">//synchronized (obj) 或者synchronized (WindowRunnable.class){ 都可以
</span><span class="c1"></span>
                <span class="k">if</span><span class="o">(</span><span class="n">ticket</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">)</span><span class="o">{</span>

                    <span class="k">try</span> <span class="o">{</span>
                        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">10</span><span class="o">)</span><span class="o">;</span>
                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
                    <span class="o">}</span>

                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">(</span><span class="o">)</span><span class="o">.</span><span class="na">getName</span><span class="o">(</span><span class="o">)</span><span class="o">+</span><span class="s">&#34;: 卖票，票号为&#34;</span><span class="o">+</span><span class="n">ticket</span><span class="o">)</span><span class="o">;</span>

                    <span class="n">ticket</span><span class="o">-</span><span class="o">-</span><span class="o">;</span>
                <span class="o">}</span><span class="k">else</span><span class="o">{</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>方式二：同步方法
将被同步的代码提取出来封装成一个方法</p>
<pre><code>    //同步方法中，同步监视器为this
    //如果同步方法被static修饰 同步监视器就为类名.class
    private synchronized void show(){
        if(ticket &gt; 0){
            try {
                Thread.sleep(10);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            System.out.println(Thread.currentThread().getName()+&quot;: 卖票，票号为&quot;+ticket);

            ticket--;
        }
    }
</code></pre><p>好处：解决了线程的安全问题</p>
<p>坏处：运行慢，变成了串行，操作同步代码时，只能有一个线程参与，相当于单线程的过程，有局限性</p>
<h4 id="懒汉式的线程安全问题">懒汉式的线程安全问题</h4>
<h3 id="线程的通信">线程的通信</h3>
<p>线程间有的时候是需要通信的，比如说最经典的生产者和消费者问题，消费者看到商品里没有货物的时候
，就不再去购买货物了，生产者看到商店货物满了的时候，就不再去生产商品了，假设现在有两个线程，
一个是生产者线程，一个是消费者线程，那么谁来告诉他们商品的情况呢？</p>
<p>这个时候我们就需要使用，线程中的三个通信方法来进行通信了</p>
<ul>
<li>wait()：一旦执行此方法，线程进入阻塞，并且释放同步监视器</li>
<li>notify()：一旦执行此方法，会唤醒一个线程，如果有多个线程，唤醒优先级最高的那个</li>
<li>notifyAll()：一旦执行此方法，会唤醒所有的线程。</li>
<li>说明，这三个方法，只能在同步代码块，或者同步方法当中,Lock有自己的wait</li>
<li>必须由同一个同步监视器调用 wait 和 notify，否则会报异常 java.lang.IllegalMonitorStateException</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="cm">/**
</span><span class="cm"> * 两个线程循环打印 1-100
</span><span class="cm"> */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CommunicationTest</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[</span><span class="o">]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Number</span> <span class="n">number</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Number</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

        <span class="n">Thread</span> <span class="n">thread1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">number</span><span class="o">)</span><span class="o">;</span>
        <span class="n">Thread</span> <span class="n">thread2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">number</span><span class="o">)</span><span class="o">;</span>

        <span class="n">thread1</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">thread2</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Number</span> <span class="kd">implements</span> <span class="n">Runnable</span><span class="o">{</span>

    <span class="kd">private</span> <span class="kt">int</span> <span class="n">number</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span><span class="o">{</span>

            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">Number</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>

                <span class="c1">//唤醒一个线程
</span><span class="c1"></span>                <span class="n">Number</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">notify</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

                <span class="c1">//唤醒所有线程
</span><span class="c1"></span>                <span class="c1">//Number.class.notifyAll();
</span><span class="c1"></span>                <span class="k">if</span> <span class="o">(</span><span class="n">number</span> <span class="o">&lt;</span><span class="o">=</span> <span class="n">100</span><span class="o">)</span><span class="o">{</span>

                    <span class="k">try</span> <span class="o">{</span>
                        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">100</span><span class="o">)</span><span class="o">;</span>
                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
                    <span class="o">}</span>

                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">(</span><span class="o">)</span><span class="o">.</span><span class="na">getName</span><span class="o">(</span><span class="o">)</span><span class="o">+</span><span class="s">&#34;打印：&#34;</span><span class="o">+</span><span class="n">number</span><span class="o">)</span><span class="o">;</span>
                    <span class="n">number</span><span class="o">+</span><span class="o">+</span><span class="o">;</span>

                    <span class="k">try</span> <span class="o">{</span>
                        <span class="c1">//从就绪态进入阻塞态，而且会释放同步锁，只能由其他线程唤醒。
</span><span class="c1"></span>                        <span class="n">Number</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">wait</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">}</span><span class="k">else</span> <span class="o">{</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><h5 id="生产者消费者问题">生产者消费者问题</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="cm">/**
</span><span class="cm"> * 生产者和消费者问题
</span><span class="cm"> */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductorAndCustomer</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[</span><span class="o">]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Clerk</span> <span class="n">clerk</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Clerk</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

        <span class="n">Producer</span> <span class="n">producer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Producer</span><span class="o">(</span><span class="n">clerk</span><span class="o">)</span><span class="o">;</span>
        <span class="n">Consumer</span> <span class="n">Consumer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Consumer</span><span class="o">(</span><span class="n">clerk</span><span class="o">)</span><span class="o">;</span>

        <span class="n">Thread</span> <span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">producer</span><span class="o">)</span><span class="o">;</span>
        <span class="n">Thread</span> <span class="n">thread1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">Consumer</span><span class="o">)</span><span class="o">;</span>

        <span class="n">thread</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;生产者1&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">thread1</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;消费者1&#34;</span><span class="o">)</span><span class="o">;</span>

        <span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">thread1</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>


    <span class="o">}</span>

<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Clerk</span><span class="o">{</span>

    <span class="kd">private</span> <span class="kt">int</span> <span class="n">productCount</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>

    <span class="c1">//生产产品,此时同步监视器是 this
</span><span class="c1"></span>    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">produceProduct</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>

        <span class="k">if</span><span class="o">(</span><span class="n">productCount</span> <span class="o">&lt;</span> <span class="n">20</span><span class="o">)</span><span class="o">{</span>
            <span class="n">productCount</span><span class="o">+</span><span class="o">+</span><span class="o">;</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">(</span><span class="o">)</span><span class="o">.</span><span class="na">getName</span><span class="o">(</span><span class="o">)</span><span class="o">+</span><span class="s">&#34;:开始生产第&#34;</span><span class="o">+</span><span class="n">productCount</span><span class="o">+</span><span class="s">&#34;个产品&#34;</span><span class="o">)</span><span class="o">;</span>

            <span class="n">notify</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

        <span class="o">}</span><span class="k">else</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;仓库满20个&#34;</span><span class="o">)</span><span class="o">;</span>
                <span class="n">wait</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

    <span class="o">}</span>

    <span class="c1">//消费产品
</span><span class="c1"></span>    <span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">consumeProduct</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>

        <span class="k">if</span><span class="o">(</span><span class="n">productCount</span> <span class="o">&gt;</span> <span class="n">0</span><span class="o">)</span><span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">(</span><span class="o">)</span><span class="o">.</span><span class="na">getName</span><span class="o">(</span><span class="o">)</span><span class="o">+</span><span class="s">&#34;:开始消费第&#34;</span><span class="o">+</span><span class="n">productCount</span><span class="o">+</span><span class="s">&#34;个产品&#34;</span><span class="o">)</span><span class="o">;</span>
            <span class="n">productCount</span><span class="o">-</span><span class="o">-</span><span class="o">;</span>

            <span class="n">notify</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="o">}</span><span class="k">else</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;没有商品了&#34;</span><span class="o">)</span><span class="o">;</span>
                <span class="n">wait</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="c1">//生产者
</span><span class="c1"></span><span class="kd">class</span> <span class="nc">Producer</span> <span class="kd">implements</span> <span class="n">Runnable</span><span class="o">{</span>

    <span class="kd">private</span> <span class="n">Clerk</span> <span class="n">clerk</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Producer</span><span class="o">(</span><span class="n">Clerk</span> <span class="n">clerk</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">clerk</span> <span class="o">=</span> <span class="n">clerk</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">(</span><span class="o">)</span><span class="o">.</span><span class="na">getName</span><span class="o">(</span><span class="o">)</span><span class="o">+</span><span class="s">&#34;:开始生产&#34;</span><span class="o">)</span><span class="o">;</span>

        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span><span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">10</span><span class="o">)</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="n">clerk</span><span class="o">.</span><span class="na">produceProduct</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="c1">//消费者
</span><span class="c1"></span><span class="kd">class</span> <span class="nc">Consumer</span> <span class="kd">implements</span> <span class="n">Runnable</span><span class="o">{</span>

    <span class="kd">private</span> <span class="n">Clerk</span> <span class="n">clerk</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Consumer</span><span class="o">(</span><span class="n">Clerk</span> <span class="n">clerk</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">clerk</span> <span class="o">=</span> <span class="n">clerk</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">(</span><span class="o">)</span><span class="o">.</span><span class="na">getName</span><span class="o">(</span><span class="o">)</span><span class="o">+</span><span class="s">&#34;:开始消费&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span><span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">10</span><span class="o">)</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="n">clerk</span><span class="o">.</span><span class="na">consumeProduct</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="o">}</span>

    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="jdk-50-新增的创建多线程的方式">jdk 5.0 新增的创建多线程的方式</h3>
<h4 id="callable">Callable</h4>
<p>创建多线程的第三种方式，实现Callable 接口
这中方式较之前实现Runnable 的方式相比。多了返回值
但是需要知道，Callable并不是Thread 的子类，所以，想要启动的话，需要借助 Future接口
Future 接口中有唯一的实现类 FutureTask，同时FutureTask也实现了Runnable接口</p>
<p>Callable 的优点</p>
<ul>
<li>可以返回值</li>
<li>可以抛出异常，被外面的操作捕获</li>
<li>支持范型</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CallableNewThread</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[</span><span class="o">]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="n">NewThread</span> <span class="n">newThread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NewThread</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

        <span class="n">FutureTask</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">futureTask</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FutureTask</span><span class="o">&lt;</span><span class="o">&gt;</span><span class="o">(</span><span class="n">newThread</span><span class="o">)</span><span class="o">;</span>

        <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">futureTask</span><span class="o">)</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

        <span class="k">try</span> <span class="o">{</span>
            <span class="c1">//futuretask 的get方法会去调用-&gt;构造参数传入的对象的call（回调）方法
</span><span class="c1"></span>            <span class="n">Integer</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">futureTask</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sum</span><span class="o">)</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ExecutionException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="o">}</span>

    <span class="o">}</span>
<span class="o">}</span>


<span class="kd">class</span> <span class="nc">NewThread</span> <span class="kd">implements</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">call</span><span class="o">(</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">100</span><span class="o">;</span> <span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="o">)</span><span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="n">2</span> <span class="o">=</span><span class="o">=</span> <span class="n">0</span><span class="o">)</span><span class="o">{</span>
                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">)</span><span class="o">;</span>
                <span class="n">sum</span> <span class="o">+</span><span class="o">=</span> <span class="n">i</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">sum</span><span class="o">;</span><span class="c1">//自动装箱，变为Integer类型
</span><span class="c1"></span>    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="线程池">线程池</h4>
<p>线程池的好处</p>
<ul>
<li>提高响应速度，减少了创建线程的时间</li>
<li>降低资源消耗，重复利用线程池中的线程</li>
<li>便于线程管理</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ThreadPool</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[</span><span class="o">]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">//创建线程池
</span><span class="c1"></span>        <span class="n">ExecutorService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="n">10</span><span class="o">)</span><span class="o">;</span>

        <span class="n">service</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="o">(</span><span class="o">)</span> <span class="o">-</span><span class="o">&gt;</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">100</span><span class="o">;</span> <span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="o">)</span><span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="n">2</span> <span class="o">=</span><span class="o">=</span> <span class="n">0</span><span class="o">)</span>
                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">(</span><span class="o">)</span><span class="o">.</span><span class="na">getName</span><span class="o">(</span><span class="o">)</span><span class="o">+</span><span class="s">&#34;:打印-&#34;</span> <span class="o">+</span> <span class="n">i</span><span class="o">)</span><span class="o">;</span>
            <span class="o">}</span>

        <span class="o">}</span><span class="o">)</span><span class="o">;</span><span class="c1">//适合使用Runnable，没有返回值
</span><span class="c1"></span>        <span class="n">Future</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">future</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="o">(</span><span class="o">)</span> <span class="o">-</span><span class="o">&gt;</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">100</span><span class="o">;</span> <span class="n">i</span><span class="o">+</span><span class="o">+</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="n">2</span> <span class="o">!</span><span class="o">=</span> <span class="n">0</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">sum</span> <span class="o">+</span><span class="o">=</span> <span class="n">i</span><span class="o">;</span>
                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">(</span><span class="o">)</span><span class="o">.</span><span class="na">getName</span><span class="o">(</span><span class="o">)</span> <span class="o">+</span> <span class="s">&#34;:打印-&#34;</span> <span class="o">+</span> <span class="n">i</span><span class="o">)</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="k">return</span> <span class="n">sum</span><span class="o">;</span>
        <span class="o">}</span><span class="o">)</span><span class="o">;</span><span class="c1">//适合使用于Callable，返回Future
</span><span class="c1"></span>
        <span class="n">Integer</span> <span class="n">integer</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">integer</span> <span class="o">=</span> <span class="n">future</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ExecutionException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">integer</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//关闭线程池
</span><span class="c1"></span>        <span class="n">service</span><span class="o">.</span><span class="na">shutdown</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>如果需要对线程池进行设置的话，不能直接使用ExecuteService 对象，因为这是一个接口
我们可以将它进行强转（向下转型），找它的实现类，ThreadPollExecutor，然后进行相关设置</p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://gejigejiemmm.github.io/categories/java/">java</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://gejigejiemmm.github.io/tags/java%E9%AB%98%E7%BA%A7/">java高级</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Shiro 中简单的认证和角色权限管理</title>
                <link>https://gejigejiemmm.github.io/posts/shiro2/</link>
                <guid isPermaLink="true">https://gejigejiemmm.github.io/posts/shiro2/</guid>
                <pubDate>Sat, 29 Feb 2020 21:57:37 +0800</pubDate>
                
                    <author>787356076 (gejigejiemmm)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
                
                    <description><![CDATA[<h2 id="目录结构">目录结构</h2>
<p>[TOC]</p>
<h2 id="数据库相关信息">数据库相关信息</h2>
<p>要想对角色权限进行管理的话，至少需要五张表，无论是一个人拥有一个角色，或者多个角色，都需要五张表
分别是
用户表，角色表，用户_角色表，权限表，角色_权限表
具体表如下，这里偷懒，不加外键了</p>
<p><img src="/img/shiroMysql.png" alt="mysql"></p>
<h2 id="shiroconfig">ShiroConfig</h2>
<p>重中之重的 shiro配置如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ShiroConfig</span> <span class="o">{</span>
    <span class="cm">/**
</span><span class="cm">     * ShiroFilterFactoryBean 处理拦截资源文件问题。
</span><span class="cm">     * 注意：单独一个ShiroFilterFactoryBean配置是或报错的，以为在
</span><span class="cm">     * 初始化ShiroFilterFactoryBean的时候需要注入：SecurityManager
</span><span class="cm">     *
</span><span class="cm">     * Filter Chain定义说明 1、一个URL可以配置多个Filter，使用逗号分隔 2、当设置多个过滤器时，全部验证通过，才视为通过
</span><span class="cm">     * 3、部分过滤器可指定参数，如perms，roles
</span><span class="cm">     *
</span><span class="cm">     */</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;shiroFilterFactoryBean&#34;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">ShiroFilterFactoryBean</span> <span class="nf">shirFilter</span><span class="o">(</span><span class="n">SecurityManager</span> <span class="n">securityManager</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">ShiroFilterFactoryBean</span> <span class="n">shiroFilterFactoryBean</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ShiroFilterFactoryBean</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">// 必须设置 SecurityManager
</span><span class="c1"></span>        <span class="n">shiroFilterFactoryBean</span><span class="o">.</span><span class="na">setSecurityManager</span><span class="o">(</span><span class="n">securityManager</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">// 如果不设置默认会自动寻找Web工程根目录下的&#34;/login.jsp&#34;页面
</span><span class="c1"></span>        <span class="n">shiroFilterFactoryBean</span><span class="o">.</span><span class="na">setLoginUrl</span><span class="o">(</span><span class="s">&#34;/login.html&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">shiroFilterFactoryBean</span><span class="o">.</span><span class="na">setUnauthorizedUrl</span><span class="o">(</span><span class="s">&#34;/noAuth.html&#34;</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">// 拦截器.
</span><span class="c1"></span>        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">filterChainDefinitionMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedHashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="c1">// 配置不会被拦截的链接 顺序判断
</span><span class="c1"></span>        <span class="n">filterChainDefinitionMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;/static/**&#34;</span><span class="o">,</span> <span class="s">&#34;anon&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">filterChainDefinitionMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;/user/login&#34;</span><span class="o">,</span> <span class="s">&#34;anon&#34;</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">// 配置退出过滤器,其中的具体的退出代码Shiro已经替我们实现了
</span><span class="c1"></span>        <span class="n">filterChainDefinitionMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;/logout&#34;</span><span class="o">,</span> <span class="s">&#34;logout&#34;</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">// 过滤链定义，从上向下顺序执行，一般将 /**放在最为下边 :这是一个坑呢，一不小心代码就不好使了;
</span><span class="c1"></span>        <span class="c1">// ① authc:所有url都必须认证通过才可以访问; ② anon:所有url都都可以匿名访问
</span><span class="c1"></span>        <span class="n">filterChainDefinitionMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;/**&#34;</span><span class="o">,</span> <span class="s">&#34;authc&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">shiroFilterFactoryBean</span><span class="o">.</span><span class="na">setFilterChainDefinitionMap</span><span class="o">(</span><span class="n">filterChainDefinitionMap</span><span class="o">)</span><span class="o">;</span>

        <span class="k">return</span> <span class="n">shiroFilterFactoryBean</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;securityManager&#34;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">DefaultWebSecurityManager</span> <span class="nf">securityManager</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">DefaultWebSecurityManager</span> <span class="n">securityManager</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultWebSecurityManager</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="c1">// 设置realm.
</span><span class="c1"></span>        <span class="n">securityManager</span><span class="o">.</span><span class="na">setRealm</span><span class="o">(</span><span class="n">myRealm</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>

        <span class="k">return</span> <span class="n">securityManager</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
</span><span class="cm">     * 身份认证realm; (这个需要自己写，账号密码校验；权限等)
</span><span class="cm">     *
</span><span class="cm">     * @return
</span><span class="cm">     */</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">MyRealm</span> <span class="nf">myRealm</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">MyRealm</span> <span class="n">myRealm</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyRealm</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">myRealm</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
</span><span class="cm">     * Shiro生命周期处理器
</span><span class="cm">     * @return
</span><span class="cm">     */</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">LifecycleBeanPostProcessor</span> <span class="nf">lifecycleBeanPostProcessor</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="n">LifecycleBeanPostProcessor</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
</span><span class="cm">     * 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证
</span><span class="cm">     * 配置以下两个bean(DefaultAdvisorAutoProxyCreator(可选)和AuthorizationAttributeSourceAdvisor)即可实现此功能
</span><span class="cm">     * @return
</span><span class="cm">     */</span>
    <span class="nd">@Bean</span>
    <span class="nd">@DependsOn</span><span class="o">(</span><span class="o">{</span> <span class="s">&#34;lifecycleBeanPostProcessor&#34;</span> <span class="o">}</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">DefaultAdvisorAutoProxyCreator</span> <span class="nf">advisorAutoProxyCreator</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">DefaultAdvisorAutoProxyCreator</span> <span class="n">advisorAutoProxyCreator</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultAdvisorAutoProxyCreator</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">advisorAutoProxyCreator</span><span class="o">.</span><span class="na">setProxyTargetClass</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">advisorAutoProxyCreator</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">AuthorizationAttributeSourceAdvisor</span> <span class="nf">authorizationAttributeSourceAdvisor</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">AuthorizationAttributeSourceAdvisor</span> <span class="n">authorizationAttributeSourceAdvisor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AuthorizationAttributeSourceAdvisor</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">authorizationAttributeSourceAdvisor</span><span class="o">.</span><span class="na">setSecurityManager</span><span class="o">(</span><span class="n">securityManager</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">authorizationAttributeSourceAdvisor</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="编写认证和授权逻辑">编写认证和授权逻辑</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyRealm</span> <span class="kd">extends</span> <span class="n">AuthorizingRealm</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="n">RoleDao</span> <span class="n">roleDao</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="n">PermissionDao</span> <span class="n">permissionDao</span><span class="o">;</span>

    <span class="cm">/**
</span><span class="cm">     * 授权
</span><span class="cm">     */</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="n">AuthorizationInfo</span> <span class="nf">doGetAuthorizationInfo</span><span class="o">(</span><span class="n">PrincipalCollection</span> <span class="n">principals</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">userName</span><span class="o">=</span><span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">SecurityUtils</span><span class="o">.</span><span class="na">getSubject</span><span class="o">(</span><span class="o">)</span><span class="o">.</span><span class="na">getPrincipal</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">SimpleAuthorizationInfo</span> <span class="n">info</span><span class="o">=</span><span class="k">new</span> <span class="n">SimpleAuthorizationInfo</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

        <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">roles</span><span class="o">=</span><span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Role</span><span class="o">&gt;</span> <span class="n">rolesByUserName</span> <span class="o">=</span> <span class="n">roleDao</span><span class="o">.</span><span class="na">getRolesByUserName</span><span class="o">(</span><span class="n">userName</span><span class="o">)</span><span class="o">;</span>
        <span class="n">rolesByUserName</span>
                <span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="o">)</span>
                <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="o">(</span><span class="n">role</span><span class="o">)</span> <span class="o">-</span><span class="o">&gt;</span> <span class="o">{</span>
                    <span class="n">roles</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">role</span><span class="o">.</span><span class="na">getRoleName</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>
                <span class="o">}</span><span class="o">)</span><span class="o">;</span>

        <span class="n">List</span><span class="o">&lt;</span><span class="n">Permission</span><span class="o">&gt;</span> <span class="n">permissionsByUserName</span> <span class="o">=</span> <span class="n">permissionDao</span><span class="o">.</span><span class="na">getPermissionsByUserName</span><span class="o">(</span><span class="n">userName</span><span class="o">)</span><span class="o">;</span>
        <span class="n">permissionsByUserName</span>
                <span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="o">)</span>
                <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="o">(</span><span class="n">permission</span><span class="o">)</span> <span class="o">-</span><span class="o">&gt;</span><span class="o">{</span>
                    <span class="n">info</span><span class="o">.</span><span class="na">addStringPermission</span><span class="o">(</span><span class="n">permission</span><span class="o">.</span><span class="na">getPermissionName</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>
                <span class="o">}</span><span class="o">)</span><span class="o">;</span>

        <span class="n">info</span><span class="o">.</span><span class="na">setRoles</span><span class="o">(</span><span class="n">roles</span><span class="o">)</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">info</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
</span><span class="cm">     * 认证
</span><span class="cm">     */</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="n">AuthenticationInfo</span> <span class="nf">doGetAuthenticationInfo</span><span class="o">(</span><span class="n">AuthenticationToken</span> <span class="n">token</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">AuthenticationException</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;token.getPrincipal:&#34;</span> <span class="o">+</span> <span class="n">token</span><span class="o">.</span><span class="na">getPrincipal</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;token.getCredentials:&#34;</span> <span class="o">+</span> <span class="n">token</span><span class="o">.</span><span class="na">getCredentials</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>
        <span class="n">String</span> <span class="n">userName</span> <span class="o">=</span> <span class="n">token</span><span class="o">.</span><span class="na">getPrincipal</span><span class="o">(</span><span class="o">)</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userDao</span><span class="o">.</span><span class="na">getUserByUserName</span><span class="o">(</span><span class="n">userName</span><span class="o">)</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">user</span> <span class="o">!</span><span class="o">=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">//说明用户存在
</span><span class="c1"></span>            <span class="c1">// Object principal, Object credentials, String realmName
</span><span class="c1"></span>            <span class="n">AuthenticationInfo</span> <span class="n">authcInfo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SimpleAuthenticationInfo</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getUsername</span><span class="o">(</span><span class="o">)</span><span class="o">,</span> <span class="n">user</span><span class="o">.</span><span class="na">getPassword</span><span class="o">(</span><span class="o">)</span><span class="o">,</span> <span class="n">getName</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>
            <span class="k">return</span> <span class="n">authcInfo</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="c1">//否则认证失败
</span><span class="c1"></span>            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="usercontroller">UserController</h2>
<p>具体的相关接口如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/user&#34;</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">&#34;/login&#34;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="nf">login</span><span class="o">(</span><span class="nd">@Valid</span> <span class="n">User</span> <span class="n">user</span><span class="o">,</span> <span class="n">BindingResult</span> <span class="n">bindingResult</span><span class="o">,</span> <span class="n">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">// 1、JSR303
</span><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">bindingResult</span><span class="o">.</span><span class="na">hasErrors</span><span class="o">(</span><span class="o">)</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;success&#34;</span><span class="o">,</span> <span class="kc">false</span><span class="o">)</span><span class="o">;</span>
            <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;errorInfo&#34;</span><span class="o">,</span> <span class="n">bindingResult</span><span class="o">.</span><span class="na">getFieldError</span><span class="o">(</span><span class="o">)</span><span class="o">.</span><span class="na">getDefaultMessage</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>
            <span class="k">return</span> <span class="n">map</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// 2、Shiro
</span><span class="c1"></span>        <span class="n">Subject</span> <span class="n">subject</span> <span class="o">=</span> <span class="n">SecurityUtils</span><span class="o">.</span><span class="na">getSubject</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">UsernamePasswordToken</span> <span class="n">token</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UsernamePasswordToken</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getUsername</span><span class="o">(</span><span class="o">)</span><span class="o">,</span> <span class="n">user</span><span class="o">.</span><span class="na">getPassword</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">subject</span><span class="o">.</span><span class="na">login</span><span class="o">(</span><span class="n">token</span><span class="o">)</span><span class="o">;</span>
            <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;success&#34;</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span><span class="o">;</span>
            <span class="k">return</span> <span class="n">map</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
            <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;success&#34;</span><span class="o">,</span> <span class="kc">false</span><span class="o">)</span><span class="o">;</span>
            <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;errorInfo&#34;</span><span class="o">,</span> <span class="s">&#34;用户名或者密码错误!&#34;</span><span class="o">)</span><span class="o">;</span>
            <span class="k">return</span> <span class="n">map</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="nd">@RequiresPermissions</span><span class="o">(</span><span class="o">{</span><span class="s">&#34;select&#34;</span><span class="o">}</span><span class="o">)</span> <span class="c1">//没有的话 AuthorizationException
</span><span class="c1"></span>    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">&#34;/select&#34;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="nf">selectPermission</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;select&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;success&#34;</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span><span class="o">;</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;msg&#34;</span><span class="o">,</span> <span class="s">&#34;当前角色有查看的权力&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">map</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@RequiresPermissions</span><span class="o">(</span><span class="o">{</span><span class="s">&#34;insert&#34;</span><span class="o">}</span><span class="o">)</span> <span class="c1">//没有的话 AuthorizationException
</span><span class="c1"></span>    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">&#34;/insert&#34;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="nf">insertPermission</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;insert&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;success&#34;</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span><span class="o">;</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;msg&#34;</span><span class="o">,</span> <span class="s">&#34;当前角色有增加的权力&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">map</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@RequiresPermissions</span><span class="o">(</span><span class="o">{</span><span class="s">&#34;update&#34;</span><span class="o">}</span><span class="o">)</span> <span class="c1">//没有的话 AuthorizationException
</span><span class="c1"></span>    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">&#34;/update&#34;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="nf">updatePermission</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;update&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;success&#34;</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span><span class="o">;</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;msg&#34;</span><span class="o">,</span> <span class="s">&#34;当前角色有更新的权力&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">map</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@RequiresPermissions</span><span class="o">(</span><span class="o">{</span><span class="s">&#34;delete&#34;</span><span class="o">}</span><span class="o">)</span> <span class="c1">//没有的话 AuthorizationException
</span><span class="c1"></span>    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">&#34;/delete&#34;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="nf">deletePermission</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;delete&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;success&#34;</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span><span class="o">;</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;msg&#34;</span><span class="o">,</span> <span class="s">&#34;当前角色有删除的权力&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">map</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@RequiresRoles</span><span class="o">(</span><span class="o">{</span><span class="s">&#34;vip&#34;</span><span class="o">}</span><span class="o">)</span> <span class="c1">//没有的话 AuthorizationException
</span><span class="c1"></span>    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">&#34;/vip&#34;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="nf">vipRole</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;vip&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;success&#34;</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span><span class="o">;</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;msg&#34;</span><span class="o">,</span> <span class="s">&#34;当前用户具有 vip 角色&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">map</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@RequiresRoles</span><span class="o">(</span><span class="o">{</span><span class="s">&#34;ip&#34;</span><span class="o">}</span><span class="o">)</span> <span class="c1">//没有的话 AuthorizationException
</span><span class="c1"></span>    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">&#34;/ip&#34;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="nf">ipRole</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;ip&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;success&#34;</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span><span class="o">;</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;msg&#34;</span><span class="o">,</span> <span class="s">&#34;当前用户具有 ip 角色&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">map</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@RequiresRoles</span><span class="o">(</span><span class="o">{</span><span class="s">&#34;p&#34;</span><span class="o">}</span><span class="o">)</span> <span class="c1">//没有的话 AuthorizationException
</span><span class="c1"></span>    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">&#34;/p&#34;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="nf">pRole</span><span class="o">(</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;vip&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;success&#34;</span><span class="o">,</span> <span class="kc">true</span><span class="o">)</span><span class="o">;</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;msg&#34;</span><span class="o">,</span> <span class="s">&#34;当前用户具有 p 角色&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">map</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="对authorizationexception进行处理">对AuthorizationException进行处理</h2>
<p>如果没有权限访问资源，控制台会报错，而且会直接返给前台错误，看着十分不舒服。
于是对错误进行了一些处理</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@ControllerAdvice</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">NoPermissionException</span> <span class="o">{</span>

    <span class="nd">@ResponseBody</span>
    <span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="n">UnauthorizedException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">handleShiroException</span><span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">&#34;无权限&#34;</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@ResponseBody</span>
    <span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="n">AuthorizationException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">AuthorizationException</span><span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">&#34;权限认证失败&#34;</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div>]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://gejigejiemmm.github.io/categories/java/">java</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://gejigejiemmm.github.io/tags/shiro/">shiro</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>giligili docker-portainer 配置</title>
                <link>https://gejigejiemmm.github.io/posts/giligili-docker%E9%85%8D%E7%BD%AE/</link>
                <guid isPermaLink="true">https://gejigejiemmm.github.io/posts/giligili-docker%E9%85%8D%E7%BD%AE/</guid>
                <pubDate>Thu, 27 Feb 2020 11:10:46 +0800</pubDate>
                
                    <author>787356076 (gejigejiemmm)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
                
                    <description><![CDATA[<h2 id="stack">stack</h2>
<h3 id="go">go</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yml" data-lang="yml"><span class="k">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;2&#39;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">services</span><span class="p">:</span><span class="w">
</span><span class="w"></span><span class="w">  </span><span class="k">api</span><span class="p">:</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="k">image</span><span class="p">:</span><span class="w"> </span>registry.cn-shenzhen.aliyuncs.com/gejigeji/gili-api<span class="p">:</span>v1<span class="m">.1</span><span class="m">.3</span><span class="w">
</span><span class="w">    </span><span class="k">restart</span><span class="p">:</span><span class="w"> </span>always<span class="w">
</span><span class="w">    </span><span class="k">environment</span><span class="p">:</span><span class="w">
</span><span class="w"></span><span class="w">      </span><span class="k">MYSQL_DSN</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;root:huyihan@tcp(172.17.33.111:3306)/giligili?charset=utf8&amp;parseTime=True&amp;loc=Local&#34;</span><span class="w">
</span><span class="w">      </span><span class="k">REDIS_ADDR</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;172.17.33.111:6379&#34;</span><span class="w">
</span><span class="w">      </span><span class="k">REDIS_PW</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&#34;</span><span class="w">
</span><span class="w">      </span><span class="k">REDIS_DB</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0&#34;</span><span class="w">
</span><span class="w">      </span><span class="k">SESSION_SECRE</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;fRJ%KVZVoq4Du4#*Rx&#34;</span><span class="w">
</span><span class="w">      </span><span class="k">GIN_MODE</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;release&#34;</span><span class="w">  
</span><span class="w">    </span><span class="k">ports</span><span class="p">:</span><span class="w">
</span><span class="w"></span><span class="w">      </span>- <span class="m">3000</span><span class="p">:</span><span class="m">3000</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h3 id="vue">vue</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yml" data-lang="yml"><span class="k">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;2&#39;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">services</span><span class="p">:</span><span class="w">
</span><span class="w"></span><span class="w">  </span><span class="k">nginx</span><span class="p">:</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="k">image</span><span class="p">:</span><span class="w"> </span>registry.cn-shenzhen.aliyuncs.com/gejigeji/giligili<span class="p">:</span>v0<span class="m">.1</span><span class="m">.1</span><span class="w">
</span><span class="w">    </span><span class="k">restart</span><span class="p">:</span><span class="w"> </span>always<span class="w">
</span><span class="w">    </span><span class="k">ports</span><span class="p">:</span><span class="w">
</span><span class="w"></span><span class="w">      </span>- <span class="m">3001</span><span class="p">:</span><span class="m">80</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h3 id="redis">redis</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yml" data-lang="yml"><span class="k">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;2&#39;</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">services</span><span class="p">:</span><span class="w">
</span><span class="w"></span><span class="w">  </span><span class="k">redis</span><span class="p">:</span><span class="w">
</span><span class="w"></span><span class="w">    </span><span class="k">image</span><span class="p">:</span><span class="w"> </span>redis<span class="w">
</span><span class="w">    </span><span class="k">restart</span><span class="p">:</span><span class="w"> </span>always<span class="w">
</span><span class="w">    </span><span class="k">volumes</span><span class="p">:</span><span class="w"> </span><span class="w">
</span><span class="w">      </span>- redis_data<span class="p">:</span>/data<span class="w">
</span><span class="w">    </span><span class="k">ports</span><span class="p">:</span><span class="w">
</span><span class="w"></span><span class="w">      </span>- <span class="m">6379</span><span class="p">:</span><span class="m">6379</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><h3 id="mysql">mysql</h3>
<p>直接http连接</p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://gejigejiemmm.github.io/categories/go/">go</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://gejigejiemmm.github.io/tags/go/">go</category>
                                
                            
                                
                                
                                
                                    <category domain="https://gejigejiemmm.github.io/tags/giligili/">giligili</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Shiro的 入门学习</title>
                <link>https://gejigejiemmm.github.io/posts/shiro1/</link>
                <guid isPermaLink="true">https://gejigejiemmm.github.io/posts/shiro1/</guid>
                <pubDate>Wed, 26 Feb 2020 20:08:17 +0800</pubDate>
                
                    <author>787356076 (gejigejiemmm)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
                
                    <description><![CDATA[<h2 id="目录结构">目录结构</h2>
<p>[TOC]</p>
<h2 id="shiro的初步学习">shiro的初步学习</h2>
<p>shiro 是一个权限管理的框架，之前就听过，但一直没学习，寒假在家还不开学，实在玩不下去了，来学个这玩玩</p>
<h2 id="快速构建">快速构建</h2>
<ul>
<li>首先创建了一个springboot 工程</li>
<li>然后加入shiro 相关依赖</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml">        <span class="nt">&lt;dependency</span><span class="nt">&gt;</span>
            <span class="nt">&lt;groupId</span><span class="nt">&gt;</span>org.apache.shiro<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId</span><span class="nt">&gt;</span>shiro-spring-boot-web-starter<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;version</span><span class="nt">&gt;</span>1.4.0<span class="nt">&lt;/version&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>创建config文件进行相关配置
<ul>
<li>shiro中有三个重要的东西</li>
<li>Subject:用户主体（关联SecurityManager，把操-作交给SecurityManager）</li>
<li>SecurityManager：安全管理器（关联Realm）</li>
<li>Realm：shiro连接数据库的桥梁</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ShiroConfig</span> <span class="o">{</span>
    <span class="cm">/**
</span><span class="cm">     * 创建 ShiroFilterFactoryBean
</span><span class="cm">     */</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;shiroFilterFactoryBean&#34;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">ShiroFilterFactoryBean</span> <span class="nf">getShiroFilterFactoryBean</span><span class="o">(</span><span class="nd">@Qualifier</span><span class="o">(</span><span class="s">&#34;securityManager&#34;</span><span class="o">)</span> <span class="n">DefaultWebSecurityManager</span> <span class="n">securityManager</span><span class="o">)</span><span class="o">{</span>
        <span class="n">ShiroFilterFactoryBean</span> <span class="n">shiroFilterFactoryBean</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ShiroFilterFactoryBean</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="c1">//设置安全管理器
</span><span class="c1"></span>        <span class="n">shiroFilterFactoryBean</span><span class="o">.</span><span class="na">setSecurityManager</span><span class="o">(</span><span class="n">securityManager</span><span class="o">)</span><span class="o">;</span>

        <span class="k">return</span> <span class="n">shiroFilterFactoryBean</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
</span><span class="cm">     * 创建DefaultWebSecurityManager
</span><span class="cm">     *
</span><span class="cm">     * shiro中securityManager用来管来 Realm
</span><span class="cm">     */</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;securityManager&#34;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">DefaultWebSecurityManager</span> <span class="nf">getDefaultWebSecurityManager</span><span class="o">(</span><span class="nd">@Qualifier</span><span class="o">(</span><span class="s">&#34;userRealm&#34;</span><span class="o">)</span> <span class="n">UserRealm</span> <span class="n">userRealm</span><span class="o">)</span><span class="o">{</span>
        <span class="c1">//创建管理类
</span><span class="c1"></span>        <span class="n">DefaultWebSecurityManager</span> <span class="n">securityManager</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultWebSecurityManager</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//关联realm
</span><span class="c1"></span>        <span class="n">securityManager</span><span class="o">.</span><span class="na">setRealm</span><span class="o">(</span><span class="n">userRealm</span><span class="o">)</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">securityManager</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
</span><span class="cm">     * 创建Realm
</span><span class="cm">     *
</span><span class="cm">     *
</span><span class="cm">     * 可以自定义Realm类
</span><span class="cm">     */</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;userRealm&#34;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">UserRealm</span> <span class="nf">getRealm</span><span class="o">(</span><span class="o">)</span><span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="n">UserRealm</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li>创建 realm</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserRealm</span> <span class="kd">extends</span> <span class="n">AuthorizingRealm</span> <span class="o">{</span>
    <span class="cm">/**
</span><span class="cm">     * 执行授权逻辑
</span><span class="cm">     * @param principalCollection
</span><span class="cm">     * @return
</span><span class="cm">     */</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="n">AuthorizationInfo</span> <span class="nf">doGetAuthorizationInfo</span><span class="o">(</span><span class="n">PrincipalCollection</span> <span class="n">principalCollection</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;执行授权逻辑&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
</span><span class="cm">     * 执行认证逻辑
</span><span class="cm">     * @param authenticationToken
</span><span class="cm">     * @return
</span><span class="cm">     * @throws AuthenticationException
</span><span class="cm">     */</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="n">AuthenticationInfo</span> <span class="nf">doGetAuthenticationInfo</span><span class="o">(</span><span class="n">AuthenticationToken</span> <span class="n">authenticationToken</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">AuthenticationException</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;执行认证逻辑&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>这个时候进入html页面进行访问是可以的，但是如果ShiroFilterFactoryBean没有加入@Bean注解的话，无论你url怎么写，都会跳转到login.jsp页面，如果出现这种情况，记得检查自己的配置文件。</p>
<h2 id="简单的认证管理">简单的认证管理</h2>
<p>新建user 的add.html 和 update.html
然后在 controller 里面（或者在webConfig下配置也可以）进行相关配置
在index.html中使用超链接指向 这两个文件</p>
<p>这个时候是可以进入的，因为我们还没在ShiroConfig中还没添加 Shiro内置的过滤器</p>
<ul>
<li>常用的过滤器
<ul>
<li>anon: 无需认证(登录) 就可以访问</li>
<li>authc: 必须认证才可以访问</li>
<li>user： rememberMe（记住我） 后才可以访问</li>
<li>role: 该资源必须得到角色权限才可以访问</li>
<li>perms: 该资源必须得到资源权限才可以访问</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="nd">@Bean</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;shiroFilterFactoryBean&#34;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">ShiroFilterFactoryBean</span> <span class="nf">getShiroFilterFactoryBean</span><span class="o">(</span><span class="nd">@Qualifier</span><span class="o">(</span><span class="s">&#34;securityManager&#34;</span><span class="o">)</span> <span class="n">DefaultWebSecurityManager</span> <span class="n">securityManager</span><span class="o">)</span><span class="o">{</span>
        <span class="n">ShiroFilterFactoryBean</span> <span class="n">shiroFilterFactoryBean</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ShiroFilterFactoryBean</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="c1">//设置安全管理器
</span><span class="c1"></span>        <span class="n">shiroFilterFactoryBean</span><span class="o">.</span><span class="na">setSecurityManager</span><span class="o">(</span><span class="n">securityManager</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//添加shiro的内置过滤器
</span><span class="c1"></span>        <span class="cm">/**
</span><span class="cm">         * shiro内置过滤器
</span><span class="cm">         * 用来对 url 拦截
</span><span class="cm">         */</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">filterMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedHashMap</span><span class="o">&lt;</span><span class="o">&gt;</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

        <span class="n">filterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;/add&#34;</span><span class="o">,</span><span class="s">&#34;authc&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">filterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;/update&#34;</span><span class="o">,</span><span class="s">&#34;authc&#34;</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//调整登录页面，默认情况下为login.jsp
</span><span class="c1"></span>        <span class="n">shiroFilterFactoryBean</span><span class="o">.</span><span class="na">setLoginUrl</span><span class="o">(</span><span class="s">&#34;/login&#34;</span><span class="o">)</span><span class="o">;</span>


        <span class="n">shiroFilterFactoryBean</span><span class="o">.</span><span class="na">setFilterChainDefinitionMap</span><span class="o">(</span><span class="n">filterMap</span><span class="o">)</span><span class="o">;</span>


        <span class="k">return</span> <span class="n">shiroFilterFactoryBean</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>这个时候再访问 /add.html,/update.html 就会发现自动重定向到了 login.html</p>
<h4 id="如果需要登录验证的话-修改realm">如果需要登录验证的话 修改Realm</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="kd">protected</span> <span class="n">AuthenticationInfo</span> <span class="nf">doGetAuthenticationInfo</span><span class="o">(</span><span class="n">AuthenticationToken</span> <span class="n">authenticationToken</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">AuthenticationException</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;执行认证逻辑&#34;</span><span class="o">)</span><span class="o">;</span>


        <span class="n">UsernamePasswordToken</span> <span class="n">token</span> <span class="o">=</span> <span class="o">(</span><span class="n">UsernamePasswordToken</span><span class="o">)</span><span class="n">authenticationToken</span><span class="o">;</span>
        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">findUser</span><span class="o">(</span><span class="n">token</span><span class="o">.</span><span class="na">getUsername</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">user</span> <span class="o">=</span><span class="o">=</span> <span class="kc">null</span><span class="o">)</span><span class="o">{</span>
            <span class="c1">//如果返回 null  shiro会帮我们抛出一个 UnknownAccountException
</span><span class="c1"></span>            <span class="c1">//也就是用户不存在
</span><span class="c1"></span>            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">//判断密码
</span><span class="c1"></span>        <span class="c1">//SimpleAuthenticationInfo 是 AuthenticationInfo的子类
</span><span class="c1"></span>        <span class="k">return</span> <span class="k">new</span> <span class="n">SimpleAuthenticationInfo</span><span class="o">(</span><span class="n">user</span><span class="o">,</span><span class="n">user</span><span class="o">.</span><span class="na">getPassword</span><span class="o">(</span><span class="o">)</span><span class="o">,</span><span class="s">&#34;&#34;</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="简单的授权管理">简单的授权管理</h2>
<p>有的时候我们需要对特定资源进行授权，当登录的用户有这个权限的时候才允许访问。</p>
<p>比如说现在有个需求是
两个账户halo和tu
halo拥有insert权限
tu拥有update权限</p>
<p>这个时候我们需要在过滤器对 url 添加所对应的权限</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="nd">@Bean</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&#34;shiroFilterFactoryBean&#34;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">ShiroFilterFactoryBean</span> <span class="nf">getShiroFilterFactoryBean</span><span class="o">(</span><span class="nd">@Qualifier</span><span class="o">(</span><span class="s">&#34;securityManager&#34;</span><span class="o">)</span> <span class="n">DefaultWebSecurityManager</span> <span class="n">securityManager</span><span class="o">)</span><span class="o">{</span>
        <span class="n">ShiroFilterFactoryBean</span> <span class="n">shiroFilterFactoryBean</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ShiroFilterFactoryBean</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="c1">//设置安全管理器
</span><span class="c1"></span>        <span class="n">shiroFilterFactoryBean</span><span class="o">.</span><span class="na">setSecurityManager</span><span class="o">(</span><span class="n">securityManager</span><span class="o">)</span><span class="o">;</span>

        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">filterMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedHashMap</span><span class="o">&lt;</span><span class="o">&gt;</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

        <span class="n">filterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;/add&#34;</span><span class="o">,</span><span class="s">&#34;authc&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">filterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;/update&#34;</span><span class="o">,</span><span class="s">&#34;authc&#34;</span><span class="o">)</span><span class="o">;</span>


        <span class="c1">//调整登录页面
</span><span class="c1"></span>        <span class="n">shiroFilterFactoryBean</span><span class="o">.</span><span class="na">setLoginUrl</span><span class="o">(</span><span class="s">&#34;/login&#34;</span><span class="o">)</span><span class="o">;</span>


        <span class="c1">//授权过滤器
</span><span class="c1"></span>        <span class="n">filterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;/add&#34;</span><span class="o">,</span><span class="s">&#34;perms[user:add]&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="n">filterMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&#34;/update&#34;</span><span class="o">,</span><span class="s">&#34;perms[user:update]&#34;</span><span class="o">)</span><span class="o">;</span>
        <span class="c1">//设置未授权的页面
</span><span class="c1"></span>        <span class="n">shiroFilterFactoryBean</span><span class="o">.</span><span class="na">setUnauthorizedUrl</span><span class="o">(</span><span class="s">&#34;/noAuth&#34;</span><span class="o">)</span><span class="o">;</span>

        <span class="n">shiroFilterFactoryBean</span><span class="o">.</span><span class="na">setFilterChainDefinitionMap</span><span class="o">(</span><span class="n">filterMap</span><span class="o">)</span><span class="o">;</span>

        <span class="k">return</span> <span class="n">shiroFilterFactoryBean</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>然后在Realm中编写 认证逻辑
注意：
如果你要通过 subject.getPrincipal() 来获取当前登录的用户的话，你需要在 doGetAuthenticationInfo方法中最后修改成
第一个参数就是你要返回的值
第二个参数用来验证密码</p>
<p>return new SimpleAuthenticationInfo(user,user.getPassword(),&quot;&quot;);</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java">    <span class="kd">protected</span> <span class="n">AuthorizationInfo</span> <span class="nf">doGetAuthorizationInfo</span><span class="o">(</span><span class="n">PrincipalCollection</span> <span class="n">principalCollection</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;执行授权逻辑&#34;</span><span class="o">)</span><span class="o">;</span>

        <span class="c1">//给资源进行授权
</span><span class="c1"></span>        <span class="n">SimpleAuthorizationInfo</span> <span class="n">info</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SimpleAuthorizationInfo</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="c1">//对 user:add 进行授权
</span><span class="c1"></span><span class="c1">//        info.addStringPermission(&#34;user:add&#34;);
</span><span class="c1"></span>
        <span class="c1">//获取当前登录的用户
</span><span class="c1"></span>        <span class="c1">//其实我觉得这步没必要，又去数据库查了，较好的做法应该在登录的时候就一次性拿出权限
</span><span class="c1"></span>        <span class="n">Subject</span> <span class="n">subject</span> <span class="o">=</span> <span class="n">SecurityUtils</span><span class="o">.</span><span class="na">getSubject</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>
        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="o">(</span><span class="n">User</span><span class="o">)</span> <span class="n">subject</span><span class="o">.</span><span class="na">getPrincipal</span><span class="o">(</span><span class="o">)</span><span class="o">;</span>

        <span class="n">info</span><span class="o">.</span><span class="na">addStringPermission</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getPerms</span><span class="o">(</span><span class="o">)</span><span class="o">)</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">info</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>如果没有权限的话，会跳转到setUnauthorizedUrl()设置的  url</p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://gejigejiemmm.github.io/categories/java/">java</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://gejigejiemmm.github.io/tags/shiro/">shiro</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>Markdown学习</title>
                <link>https://gejigejiemmm.github.io/posts/markdown%E5%AD%A6%E4%B9%A0/</link>
                <guid isPermaLink="true">https://gejigejiemmm.github.io/posts/markdown%E5%AD%A6%E4%B9%A0/</guid>
                <pubDate>Wed, 26 Feb 2020 12:45:46 +0800</pubDate>
                
                    <author>787356076 (gejigejiemmm)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
                
                    <description><![CDATA[<h2 id="引用图片的方式">引用图片的方式</h2>
<h3 id="本地引用图片">本地引用图片</h3>
<p><img src="/img/Orange.png" alt="orange"></p>
<hr>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://gejigejiemmm.github.io/categories/markdown/">markdown</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://gejigejiemmm.github.io/tags/markdown/">markdown</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>hugo 配置文件</title>
                <link>https://gejigejiemmm.github.io/posts/blog2/</link>
                <guid isPermaLink="true">https://gejigejiemmm.github.io/posts/blog2/</guid>
                <pubDate>Tue, 25 Feb 2020 16:02:46 +0800</pubDate>
                
                    <author>787356076 (gejigejiemmm)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
                
                    <description><![CDATA[<p>hugo conf文件的简单配置</p>
<pre><code>baseURL = &quot;https://gejigejiemmm.github.io/&quot;
title = &quot;gejigejiemmm&quot;
theme = &quot;hugo-notepadium&quot;
copyright = &quot;©2020 gejigejiemmm.&quot;

languageCode = &quot;zh-cn&quot;
hasCJKLanguage = true

enableRobotsTXT = true

# Enable Disqus
#disqusShortname = &quot;XXX&quot;

# Google Analytics
#googleAnalytics = &quot;UA-123-45&quot;

[markup.highlight]
codeFences = true
noClasses = false

[markup.goldmark.renderer]
unsafe = true  # enable raw HTML in Markdown

[params]
style = &quot;auto&quot;  # default: auto. light: light theme, dark: dark theme, auto: based on system.
dateFormat = &quot;Monday, January 2, 2006&quot;  # if unset, default is &quot;2006-01-02&quot;
logo = &quot;tomato.png&quot;  # if you have a logo png
slogan = &quot;halo😊&quot;
license = &quot;&quot;  # CC License

[params.comments]
enable = false  # En/Disable comments globally, default: false. You can always enable comments on per page.

[params.math]
enable = false  # optional: true, false. Enable globally, default: false. You can always enable math on per page.
use = &quot;katex&quot;  # option: &quot;katex&quot;, &quot;mathjax&quot;. default: &quot;katex&quot;

[params.syntax]
use = &quot;none&quot;  # builtin: &quot;prismjs&quot;, &quot;hljs&quot;. &quot;none&quot; means Chroma
theme = &quot;xcode&quot;
darkTheme = &quot;xcode-dark&quot;  # apply this theme in dark mode

[params.nav]
showCategories = true       # /categories/
showTags = true             # /tags/

# custom navigation items

[[params.nav.custom]]
title = &quot;Github&quot;
url = &quot;https://github.com/gejigejiemmm/&quot;

[[params.nav.custom]]
title = &quot;Hugo&quot;
url = &quot;https://gohugo.io/&quot;


</code></pre>]]></description>
                
                
                
                
                
                    
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://gejigejiemmm.github.io/tags/hugo/">hugo</category>
                                
                            
                        
                    
                
            </item>
        
            <item>
                <title>halo hugo</title>
                <link>https://gejigejiemmm.github.io/posts/blog/</link>
                <guid isPermaLink="true">https://gejigejiemmm.github.io/posts/blog/</guid>
                <pubDate>Tue, 25 Feb 2020 15:55:30 +0800</pubDate>
                
                    <author>787356076 (gejigejiemmm)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</copyright>
                
                    <description><![CDATA[<h3 id="hugo-的第一篇日志">hugo 的第一篇日志</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorld</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="o">[</span><span class="o">]</span><span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&#34;Hello World&#34;</span><span class="o">)</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p><img src="/Orange.png" alt="图片"></p>
<p><a href="https://themes.gohugo.io/hugo-notepadium/">https://themes.gohugo.io/hugo-notepadium/</a></p>
<p><a href="https://tanhoo2019.github.io/2020/01/how_to_use/">https://tanhoo2019.github.io/2020/01/how_to_use/</a></p>
]]></description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://gejigejiemmm.github.io/categories/java/">java</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://gejigejiemmm.github.io/tags/java%E5%9F%BA%E7%A1%80/">java基础</category>
                                
                            
                        
                    
                
            </item>
        
    </channel>
</rss>
